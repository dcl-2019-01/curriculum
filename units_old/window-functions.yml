title: Window functions
theme: wrangle
needs: manip-basics
readings: ~
updated: ~
desc: "\n`summarise()` and `mutate()` work at the data frame level: they take a\ndata
  frame as input and return a data frame as output. You combine these\ndata frame
  functions with with vector functions: functions that take a\nvector as input and
  return a vector as output. The length of the output\ndetermines whether a given
  function work with `summarise()` or\n`mutate()`:\n\n  - `summarise()` works with
  **summary** functions; functions that take\n    `n` inputs and return 1 output.
  This includes functions like `sum()`\n    and `mean()` for numeric vectors; `all()`
  and `any()` for logical\n    vectors; and `str_c()` with `collapse` for character
  vectors.\n\n  - `mutate()` works with **transformation** functions: functions that\n
  \   take `n` inputs and return `n` outputs. So far you’ve mainly used\n    vectorised
  maps, like `-` and `+`, or `&` and `|`. In this unit,\n    you’ll learn some finer
  details of these functions, and learn a\n    new class of functions called **window
  functions**.\n\n<!-- end list -->\n\n``` r\nlibrary(tidyverse)\n```\n\n## Vectorised
  map functions\n\n### Unary\n\nThe simplest type of transformation function is the
  “unary vectorised\nmap”. This is a precise, but complicated name. Let’s unpack it
  and\nexplain each component:\n\n  - **Unary** means that the function takes a single
  vector as input.\n\n  - **Vectorised** means that the function takes a vector as
  input and\n    returns a vector of the same length as the output (but possibly a\n
  \   different type).\n\n  - **Map** is a mathematical term that means that you can
  independently\n    compute each element of the output from the corresponding piece
  of\n    the input. In other words, if your input is `x` and your output is\n    `z`,
  the only value of `x` that `z[i]` depends on is `x[i]`.\n\nThe diagram below shows
  a vectorised function, focusing on how the input\nis connected to the output. The
  input is on the left, and the output is\non the bottom. You can see how each input
  affects the output by\nfollowing the lines right and down; you can see how an output
  is\ncomputed from the input by following the lines up and left. The\nconnections
  for a vectorised function are simple: each input only\naffects the output at the
  same position.\n\n![](diagrams/map.png)<!-- -->\n\nIt’s helpful to organise unary
  vectorised maps by the type of input\nvector:\n\n  - Numeric: most of these come
  from base R and include functions like\n    `log()` and `abs()`, and operators like
  `!` and `-`.\n    \n    ``` r\n    x1 <- c(1, 4, 2)\n    -x1\n    #> [1] -1 -4 -2\n
  \   \n    x2 <- c(TRUE, FALSE, FALSE)\n    !x2\n    #> [1] FALSE  TRUE  TRUE\n    ```\n\n
  \ - Character: these are provided by stringr and include functions like\n    `str_length()`,
  `str_lower()` and `str_upper()`.\n\n  - Date times: these are provided by lubridate
  and include functions\n    like `yday()` and `year()`.\n\n### Binary\n\nAnother
  extremely common class of transformation functions are the\n**binary** vectorised
  maps. These are similar to the unary\ntransformation functions except that they
  take 2 vector inputs. You’ve\nused many of these functions already because they
  include the\nmathematical operators `-`, `+`, `/`, `*`, `%%` and `%/%`.\n\nThere
  is a new wrinkle with these functions: since they take two\nvectors, what happens
  if they are different lengths? For example, in `x\n* 2` below, `x` has length 10,
  but `y` has length 1.\n\n``` r\nx <- sample(100, 10)\ny <- 2\n\nx * y\n#>  [1]  18
  166 118  32   2  90  94  54 136 142\n```\n\nR has a special set of rules that cover
  this situation called the\n**recycling rules**. Whenever you call a binary vectorised
  fuction with\ninputs of different lengths, R will recycle the shorter vector to
  be the\nsame length as the longer. This is particularly useful when combined\nwith
  summary operators:\n\n``` r\nx - min(x)\n#>  [1]  8 82 58 15  0 44 46 26 67 70\n(x
  - mean(x)) / sd(x)\n#>  [1] -1.1889  1.4295  0.5803 -0.9412 -1.4720  0.0849  0.1557
  -0.5520\n#>  [9]  0.8987  1.0049\n```\n\n(You can use recycling rules with vectors
  that are not of length 1, but\nthat makes it easy to write confusing code, so I
  don’t recommend it.)\n\n## Vectorised window functions\n\nVectorised map functions
  can be generalised to vectorised **window**\nfunctions. In a window function the
  output now depends on a contiguous\nwindow of values (i.e. a sequence with no gaps).
  Map functions are a\nspecial case of window functions because in a map function,
  the “window”\nis just a single value.\n\n### Offset\n\nThe simplest type of window
  is an offset. Each output value still\ndepends on only a single input value, but
  the input and output are no\nlonger aligned. The following diagram illustrates offsets
  in either\ndirection.\n\n![](diagrams/offset.png)<!-- -->\n\nIn dplyr you can use
  `lead()` (positive) and `lag()` (negative) to look\nat offsets.\n\n``` r\ntibble(\n
  \ x = 1:5,\n  pos = lead(x),\n  neg = lag(x)\n)\n#> # A tibble: 5 x 3\n#>       x
  \  pos   neg\n#>   <int> <int> <int>\n#> 1     1     2    NA\n#> 2     2     3     1\n#>
  3     3     4     2\n#> 4     4     5     3\n#> 5     5    NA     4\n```\n\nChange
  the number of positions to look ahead or behind with the second\nargument, `n`.\n\nRemember
  that these are vectorised functions, so the output must be the\nsame length as the
  input. That means we need to pad either the beginning\nor the end of the vector.
  `lead()` and `lag()` pad with `NA` but you can\nchange this value with the `default`
  argument.\n\n`lead()` and `lag()` are very useful when combined with a binary\nvectorised
  map:\n\n  - `x == lag(x)` tells you if `x` has changed compared to the previous\n
  \   value.\n\n  - `x - lag(x)` tells you how `x` has changed.\n\n### Rolling\n\nRolling
  window functions are the next step up in complexity. Instead of\na window of size
  one, they now have a fixed window of size `m`.\n\n![](diagrams/rolling.png)<!--
  -->\n\nNeither base R not dplyr provide rolling functions, but you can get them\nfrom
  the RcppRoll package. By default the `roll_` functions are not\nvectorised (they
  return shorter vectors), but you can make them\nvectorised by setting `fill = NA`.\n\n```
  r\nlibrary(RcppRoll)\n\ntibble(\n  x = 1:5,\n  roll_sum = roll_sum(x, 2, fill =
  NA),\n  roll_mean = roll_mean(x, 2, fill = NA)\n)\n#> # A tibble: 5 x 3\n#>       x
  roll_sum roll_mean\n#>   <int>    <dbl>     <dbl>\n#> 1     1     3.00      1.50\n#>
  2     2     5.00      2.50\n#> 3     3     7.00      3.50\n#> 4     4     9.00      4.50\n#>
  5     5    NA        NA\n```\n\nYou can control how the window is aligned to the
  data with the `align`\nargument. The following figure shows `n = 3` and the three
  possible\nvalues of `align`. Note that the output value is `NA` if there are less\nthan
  3 inputs.\n\n![](diagrams/rolling-dir.png)<!-- -->\n\n### Cumulative\n\nThe next
  step up in complexity are the cumulative functions, where the\nwindow size is no
  longer constant. A cumulative function uses all values\nup to the current position.\n\n![](diagrams/cumulative.png)<!--
  -->\n\nBase R includes the cumulative functions `cumsum()`, `cumprod()`,\n`cummax()`,
  and `cummin()`. dplyr provides a few others: `cummean()`,\n`cumany()`, `cumall()`.
  I’m not aware of any useful cumulative functions\nfor strings or date/times.\n\n```
  r\nlibrary(RcppRoll)\n\ntibble(\n  x = 1:5,\n  cumsum = cumsum(x),\n  cummean =
  cummean(x)\n)\n#> # A tibble: 5 x 3\n#>       x cumsum cummean\n#>   <int>  <int>
  \  <dbl>\n#> 1     1      1    1.00\n#> 2     2      3    1.50\n#> 3     3      6
  \   2.00\n#> 4     4     10    2.50\n#> 5     5     15    3.00\n```\n\n### Complete\n\nThe
  most complex type of window function is the **complete** window\nfunction, where
  every output value depends on every input value.\n\n![](diagrams/complete.png)<!--
  -->\n\nThis class of window function includes all the ranking functions,\nbecause
  the rank of any value depends on the rank of all the other\nvalues. There are three
  key ranking functions that differ in how ties\nare handled:\n\n``` r\ntibble(\n
  \ x = c(10, 10, 10, 20, 20, 30),\n  min = min_rank(x),\n  dense = dense_rank(x),\n
  \ row_number = row_number(x)\n)\n#> # A tibble: 6 x 4\n#>       x   min dense row_number\n#>
  \  <dbl> <int> <int>      <int>\n#> 1  10.0     1     1          1\n#> 2  10.0     1
  \    1          2\n#> 3  10.0     1     1          3\n#> 4  20.0     4     2          4\n#>
  5  20.0     4     2          5\n#> 6  30.0     6     3          6\n```\n\nUse `desc()`
  if you want the highest inputs to have the lowest ranks.\n\n`min_rank()` works like
  sports ranking: if there are three people tied\nfor first place, the next rank is
  4th place. `dense_rank()` ensures that\nthe ranks are “dense”, i.e. it doesn’t skip
  any ranks for ties.\n`row_number()` breaks ties so that every row gets a unique
  number. It’s\neasiest to understand the differences in terms of filtering:\n\n  -
  `min_rank(x) <= 2` will select all elements in first place, and will\n    only select
  another if there wasn’t a tie for first.\n\n  - `dense_rank(x) <= 2` will select
  all elements tied for first place,\n    and all elements tied for the next rank.\n\n
  \ - `row_number(x) <= 2` will always select exactly two elements.\n\n### Ordering\n\nSo
  far we’ve dodged the question of what we mean by “before” and\n“after”, relying
  on the order of the rows. There are three ways to\nbe more precise:\n\n  - `arrange()`
  the data so you know exactly how the rows are ordered.\n\n  - Use the `order_by`
  argument (if present), to order by a specific\n    variable. This is more efficient
  than `arrange()` if you’re only\n    computing a single window function.\n\n  -
  Use the `order_by()` helper if there is no `order_by` argument.\n\nThe main difference
  between the `arrange` and `order_by` is what happens\nto the other columns:\n\n```
  r\ndf <- tribble(\n  ~time, ~ value,\n      7,       3,\n      1,       5,\n      5,
  \      -2,\n      3,       0\n)\n\ndf %>% \n  arrange(time) %>%\n  mutate(cumulate
  = cumsum(value))\n#> # A tibble: 4 x 3\n#>    time value cumulate\n#>   <dbl> <dbl>
  \   <dbl>\n#> 1  1.00  5.00     5.00\n#> 2  3.00  0        5.00\n#> 3  5.00 -2.00
  \    3.00\n#> 4  7.00  3.00     6.00\n\ndf %>% \n  mutate(cumulate = order_by(time,
  cumsum(value)))\n#> # A tibble: 4 x 3\n#>    time value cumulate\n#>   <dbl> <dbl>
  \   <dbl>\n#> 1  7.00  3.00     6.00\n#> 2  1.00  5.00     5.00\n#> 3  5.00 -2.00
  \    3.00\n#> 4  3.00  0        5.00\n```\n"
