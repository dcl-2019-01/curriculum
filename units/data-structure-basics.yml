title: Data structure basics
theme: program
needs: manip-basics
readings: ~
updated: ~
desc: "\nIt’s helpful to know a little bit about how data structures are\norganised
  in R. The simplest data structure in R is the vector, which\ncan be broken up in
  to atomic vectors and augmented vectors. Vectors of\nrelated data are organised
  together in tibbles and data.frames.\n\n``` r\nlibrary(tidyverse)\n```\n\n## Atomic
  vectors\n\nThe atomic vectors are the “atoms” of R, the simple building blocks upon\nwhich
  all else is built. There are four types of atomic vector that are\nimportant for
  data analysis:\n\n  - **logical** vectors `<lgl>` contain `TRUE` or `FALSE`.\n  -
  **integer** vectors `<int>` contain integers.\n  - **double** vectors `<dbl>` contain
  real numbers.\n  - **character** vector `<chr>` contain strings made with `\"\"`.\n\nAll
  vectors can also contain the missing value `NA`. You’ll learn more\nabout missing
  values later on. Collectively integer and double vectors\nare known as **numeric**
  vectors. The difference is rarely important in\nR.\n\nYou create atomic vectors
  by hand with the `c()` function:\n\n``` r\nlogical <- c(TRUE, FALSE, FALSE)\n\n#
  The difference between the real number 1 and the integer 1 is not \n# usually important,
  but it sometimes comes up. R uses the suffix \n# \"L\" to indicate that a number
  is an integer.\ninteger <- c(1L, 2L, 3L)\n\ndouble <- c(1.5, 2.8, pi)\n\ncharacter
  <- c(\"this\", \"is\", \"a character\", \"vector\")\n```\n\n### Subsetting\n\nUse
  `[[` extract a single value out of a vector:\n\n``` r\nx <- c(5.1, 4.2, 5.3, 1.4)\nx[[2]]\n#>
  [1] 4.2\n```\n\nUse `[` to extract multiple values:\n\n``` r\n# Keep selected locations\nx[c(1,
  3)]\n#> [1] 5.1 5.3\n\n# Drop selected locations\nx[-1]\n#> [1] 4.2 5.3 1.4\n\n#
  Select locations where the condition is true\nx[x > 5]\n#> [1] 5.1 5.3\n```\n\nThe
  names of these functions are `[` and `[[` but are used like `x[y]`\n(pronounced
  “x square-bracket y”) and `x[[y]]` (pronounced “x\ndouble-square-bracket y”). You
  can get help on them with ``?`[` `` and\n``?`[[` ``.\n\n### Augmented vectors\n\nAugmented
  vectors are atomic vectors with additional metadata. There are\nfour important augmented
  vectors:\n\n  - **factors** `<fct>`, which are used to represent categorical\n    variables
  can take one of a fixed and known set of possible values\n    (called the levels).\n\n
  \ - **ordered factors** `<ord>`, which are like factors but where the\n    levels
  have an intrinsic ordering (i.e. it’s reasonable to say that\n    one level is “less
  than” or “greater than” another variable).\n\n  - **dates** `<dt>`, record a date.\n\n
  \ - **date-times** `<dttm>`, which are also known as POSIXct, record a\n    date
  and a time.\n\nFor now, you just need to recognise these when you encounter them.\nYou’ll
  learn how to create each type of augmented vector later in the\ncourse.\n\n## Data
  frames/tibbles\n\nRelated vectors (both atomic and augmented) are collected together
  into\ndata frames or tibbles. You can think of them as a list of vectors,\nwhere
  every vector has the same length. Later you’ll learn the precise\ndifferent between
  data.frames and tibbles, but don’t worry about it for\nnow. There are two ways to
  create tibbles by hand:\n\n1.  From individual vectors, each representing a column:\n
  \   \n    ``` r\n    my_tibble <- tibble(\n      x = c(1, 9, 5),\n      y = c(TRUE,
  FALSE, FALSE),\n      z = c(\"apple\", \"pear\", \"banana\")\n    )\n    my_tibble\n
  \   #> # A tibble: 3 x 3\n    #>       x y     z     \n    #>   <dbl> <lgl> <chr>
  \n    #> 1  1.00 T     apple \n    #> 2  9.00 F     pear  \n    #> 3  5.00 F     banana\n
  \   ```\n\n2.  From individual values, organised in rows:\n    \n    ``` r\n    my_tibble
  <- tribble(\n      ~x, ~y,    ~z,\n      1,  TRUE,  \"apple\",\n      9,  FALSE,
  \"pear\",\n      5,  FALSE, \"banana\"\n    )\n    my_tibble\n    #> # A tibble:
  3 x 3\n    #>       x y     z     \n    #>   <dbl> <lgl> <chr> \n    #> 1  1.00
  T     apple \n    #> 2  9.00 F     pear  \n    #> 3  5.00 F     banana\n    ```\n\nTypically
  it will be obvious whether you need to use `tibble()` or\n`tribble()`. One representation
  will either be much shorter or much\nclearer than the other.\n\n### Dimensions\n\nWhen
  you print a tibble it tell you its column names and the overall\ndimensions:\n\n```
  r\ndiamonds\n#> # A tibble: 53,940 x 10\n#>    carat cut       color clarity depth
  table price     x     y     z\n#>    <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int>
  <dbl> <dbl> <dbl>\n#>  1 0.230 Ideal     E     SI2      61.5  55.0   326  3.95  3.98
  \ 2.43\n#>  2 0.210 Premium   E     SI1      59.8  61.0   326  3.89  3.84  2.31\n#>
  \ 3 0.230 Good      E     VS1      56.9  65.0   327  4.05  4.07  2.31\n#>  4 0.290
  Premium   I     VS2      62.4  58.0   334  4.20  4.23  2.63\n#>  5 0.310 Good      J
  \    SI2      63.3  58.0   335  4.34  4.35  2.75\n#>  6 0.240 Very Good J     VVS2
  \    62.8  57.0   336  3.94  3.96  2.48\n#>  7 0.240 Very Good I     VVS1     62.3
  \ 57.0   336  3.95  3.98  2.47\n#>  8 0.260 Very Good H     SI1      61.9  55.0
  \  337  4.07  4.11  2.53\n#>  9 0.220 Fair      E     VS2      65.1  61.0   337
  \ 3.87  3.78  2.49\n#> 10 0.230 Very Good H     VS1      59.4  61.0   338  4.00
  \ 4.05  2.39\n#> # ... with 53,930 more rows\n```\n\nIf you want to get access dimensions
  directly, you have three options:\n\n``` r\ndim(diamonds)\n#> [1] 53940    10\nnrow(diamonds)\n#>
  [1] 53940\nncol(diamonds)\n#> [1] 10\n```\n\nTo get the variable names, use `names()`:\n\n```
  r\nnames(diamonds)\n#>  [1] \"carat\"   \"cut\"     \"color\"   \"clarity\" \"depth\"
  \  \"table\"   \"price\"  \n#>  [8] \"x\"       \"y\"       \"z\"\n```\n\nThere
  isn’t currently a convenient way to get the variable types, but\nyou can use `purrr::map_chr()`
  to apply `type_sum()` (short for type\nsummary) to each variable.\n\n``` r\ntype_sum(diamonds)\n#>
  [1] \"tibble\"\nmap_chr(diamonds, type_sum)\n#>   carat     cut   color clarity
  \  depth   table   price       x       y \n#>   \"dbl\"   \"ord\"   \"ord\"   \"ord\"
  \  \"dbl\"   \"dbl\"   \"int\"   \"dbl\"   \"dbl\" \n#>       z \n#>   \"dbl\"\n```\n\n###
  Variables\n\nYou can extract a variable out of a tibble by using `[[` or `$`:\n\n```
  r\nmtcars[[\"mpg\"]]\n#>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2
  17.8 16.4 17.3 15.2\n#> [15] 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2
  27.3 26.0 30.4\n#> [29] 15.8 19.7 15.0 21.4\nmtcars$mpg\n#>  [1] 21.0 21.0 22.8
  21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2\n#> [15] 10.4 10.4 14.7 32.4
  30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4\n#> [29] 15.8 19.7 15.0 21.4\n```\n\nFor
  this reason, when we want to be precise about which tibble a\nvariable comes from,
  we use the syntax `dataset$variablename`.\n\nThe dplyr equivalent, which can more
  easily be used in a pipe, is\n`pull()`:\n\n``` r\nmtcars %>% pull(mpg)\n#>  [1]
  21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2\n#> [15] 10.4
  10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4\n#> [29] 15.8 19.7
  15.0 21.4\n```\n"
