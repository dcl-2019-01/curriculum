title: Scoped verb basics
theme: wrangle
needs: manip-basics
readings: ~
updated: ~
desc: "\nYou'll often want to operate on multiple columns at the same time. Luckily,
  there are **scoped** versions of dplyr verbs that allow you to apply that verb to
  multiple columns at once.\n\nScoped verbs are powerful. They allow you to quickly
  carry out complex wrangling that would otherwise be much more difficult.\n\nEach
  dplyr verb comes in three scoped variants. The name of each variant consists of
  the dplyr verb plus one of three suffixes: `_at`, `_all`, or `_if`. In this reading,
  you'll learn about the `_all` and `_at` scoped verbs.\n\nWe've also created a [scoped
  verbs cheat sheet](https://github.com/dcl-docs/cheat-sheets/blob/master/scoped_verbs.md)
  to help you organize all the information involved in scoped verbs.\n\n### \\_all
  and \\_at scoped verbs\n\n`x` is a simple tibble.\n\n``` r\nx <-\n  tibble(\n    number_1
  = c(1, 1, 51),\n    number_2 = c(3, 42, NA),\n    letter = c(\"w\", \"x\", \"w\")\n
  \ )\n\nx\n```\n\n    ## # A tibble: 3 x 3\n    ##   number_1 number_2 letter\n    ##
  \     <dbl>    <dbl> <chr> \n    ## 1        1        3 w     \n    ## 2        1
  \      42 x     \n    ## 3       51       NA w\n\nWe can use `summarize()` to find
  the number of distinct values for each variable.\n\n``` r\nx %>% \n  summarize(\n
  \   number_1 = n_distinct(number_1),\n    number_2 = n_distinct(number_2),\n    letter
  = n_distinct(letter)\n  )\n```\n\n    ## # A tibble: 1 x 3\n    ##   number_1 number_2
  letter\n    ##      <int>    <int>  <int>\n    ## 1        2        3      2\n\nThere
  are only three variables in `x`. If `x` had more columns, however, writing out each
  `n_distinct()` call would be a hassle. Instead, we can use a scoped verb to succinctly
  summarize all columns at once. This will save time and reduce code duplication.\n\nEach
  scoped verb has a suffix and a prefix. The prefix specifies the dplyr verb and the
  suffix specifies the scoped variant. There are two suffixes you'll learn about in
  this reading:\n\n-   `_all`: applies the dplyr verb to all variables\n-   `_at`:
  applies the dplyr verb to selected variables\n\n#### \\_all\n\nTo summarize all
  the variables in `x` as we did above, we'll use the scoped verb `summarize_all()`.\n\nEach
  scoped verb takes a tibble and a function as arguments. In this case, the function
  is `n_distinct()`.\n\n``` r\nx %>% \n  summarize_all(n_distinct)\n```\n\n    ##
  # A tibble: 1 x 3\n    ##   number_1 number_2 letter\n    ##      <int>    <int>
  \ <int>\n    ## 1        2        3      2\n\nNotice that we wrote `n_distinct`,
  and not `n_distinct()`. Recall that `n_distinct` is the name of the function, while
  `n_distinct()` calls the function.\n\n#### \\_at\n\nTo summarize just variables
  `number_1` and `number_2`, we'll use `summarize_at().` The `_at` verbs take an additional
  argument: a list of columns specified inside the function `vars()`.\n\n``` r\nx
  %>% \n  summarize_at(vars(number_1, number_2), n_distinct)\n```\n\n    ## # A tibble:
  1 x 2\n    ##   number_1 number_2\n    ##      <int>    <int>\n    ## 1        2
  \       3\n\nInside `vars()`, you can specify variables using the same syntax as
  `select()`. You can give their full names, use `contains()`, remove some with `-`,
  etc.\n\n``` r\nx %>% \n  summarize_at(vars(contains(\"number\")), n_distinct)\n```\n\n
  \   ## # A tibble: 1 x 2\n    ##   number_1 number_2\n    ##      <int>    <int>\n
  \   ## 1        2        3\n\n### Scoped `mutate()`\n\nIf you want to apply `mutate()`
  to multiple columns, the same logic applies. `mutate_all()` will apply the same
  function to each column, changing all of them in the same way.\n\n``` r\nx %>% \n
  \ mutate_all(lag)\n```\n\n    ## # A tibble: 3 x 3\n    ##   number_1 number_2 letter\n
  \   ##      <dbl>    <dbl> <chr> \n    ## 1       NA       NA <NA>  \n    ## 2        1
  \       3 w     \n    ## 3        1       42 x\n\nAnd `mutate_at()` changes just
  the variables specified inside `vars()`.\n\n``` r\nx %>% \n  mutate_at(vars(starts_with(\"number\")),
  lag)\n```\n\n    ## # A tibble: 3 x 3\n    ##   number_1 number_2 letter\n    ##
  \     <dbl>    <dbl> <chr> \n    ## 1       NA       NA w     \n    ## 2        1
  \       3 x     \n    ## 3        1       42 w\n\n### Anonymous functions\n\n`n_distinct()`
  and `lag()` are both named functions. However, scoped verbs can also take anonymous
  functions.\n\nIn a scoped verb, you start an anonymous function with `~`, and use
  `.` to refer to the function's argument.\n\nFor example, the following code tells
  us which variables have more than two distinct values.\n\n``` r\nx %>% \n  summarize_all(~
  n_distinct(.) > 2)\n```\n\n    ## # A tibble: 1 x 3\n    ##   number_1 number_2
  letter\n    ##   <lgl>    <lgl>    <lgl> \n    ## 1 FALSE    TRUE     FALSE\n\nThe
  `.` is a placeholder. It refers to each column specified in the scoped verb in turn.
  In this case, it refers to `number_1`, then `number_2`, then `letter`.\n\n### `...`\n\nThe
  scoped verbs all take `...` as a final argument. You can use `...` to specify arguments
  to a named function without having to write an anonymous function.\n\nFor example,
  you might not want to count `NA`s as distinct values. We could write an anonymous
  function that doesn't count `NA`s.\n\n``` r\nx %>% \n  summarize_all(~ n_distinct(.,
  na.rm = TRUE))\n```\n\n    ## # A tibble: 1 x 3\n    ##   number_1 number_2 letter\n
  \   ##      <int>    <int>  <int>\n    ## 1        2        2      2\n\nIt's simpler,
  however, to just specify the additional argument after the function name.\n\n```
  r\nx %>% \n  summarize_all(n_distinct, na.rm = TRUE)\n```\n\n    ## # A tibble:
  1 x 3\n    ##   number_1 number_2 letter\n    ##      <int>    <int>  <int>\n    ##
  1        2        2      2\n\nThe `...` functionality makes the code easier to read,
  avoiding the extra syntax involved in anonymous functions. You can use it to add
  any number of arguments.\n\nUnfortunately, you cannot use `...` to supply columns
  of the original tibble as function arguments. For example, the following code tries
  to combine `number_1` and `number_2` with `letter` to create strings. However, `mutate_at()`
  says it can't find `letter`.\n\n``` r\nx %>% \n  mutate_at(vars(contains(\"number\")),
  str_c, letter)\n```\n\n    ## Error in list2(...): object 'letter' not found\n\nYou
  have to use an anonymous function if you want to reference any of the tibble's columns
  in the function.\n\n``` r\nx %>% \n  mutate_at(vars(contains(\"number\")), ~ str_c(.,
  letter))\n```\n\n    ## # A tibble: 3 x 3\n    ##   number_1 number_2 letter\n    ##
  \  <chr>    <chr>    <chr> \n    ## 1 1w       3w       w     \n    ## 2 1x       42x
  \     x     \n    ## 3 51w      <NA>     w\n\n### Multiple functions\n\nYou can
  use `list()` to supply the scoped variants of `mutate()`, `summarize()`, and `transmute()`
  with multiple functions.\n\n``` r\nx %>% \n  summarize_at(\n    vars(number_1, number_2),\n
  \   list(median = median, distinct = n_distinct),\n    na.rm = TRUE\n  )\n```\n\n
  \   ## # A tibble: 1 x 4\n    ##   number_1_median number_2_median number_1_distinct
  number_2_distinct\n    ##             <dbl>           <dbl>             <int>             <int>\n
  \   ## 1               1            22.5                 2                 2\n\nYour
  list of functions must be *named* for this functionality to work. In this example,
  we gave `median()` the name \"median\" and `n_distinct()` the name \"distinct.\"
  `summarize_at()` then names the new variables by appending these names (\"median\"
  and \"distinct\") to the end of the existing variable names.\n\n### Scoped `select()`
  and `rename()`\n\nThe scoped variants of `select()` and `rename()` work very similarly
  to those of `mutate()`, `transmute()`, and `summarize()`. However, they apply the
  specified function(s) to *column names*, instead of to column values.\n\nThe following
  code changes all column names to lowercase.\n\n``` r\ncapitals <-\n  tribble(\n
  \   ~Country, ~Capital,\n    \"Namibia\", \"Windhoek\",\n    \"Georgia\", \"Tbilisi\"\n
  \ )\n\ncapitals %>% \n  rename_all(str_to_lower)\n```\n\n    ## # A tibble: 2 x
  2\n    ##   country capital \n    ##   <chr>   <chr>   \n    ## 1 Namibia Windhoek\n
  \   ## 2 Georgia Tbilisi\n\nThe scoped variants of `rename()` will generally be
  more helpful than those of `select()`.\n"
