title: Scoped verbs
theme: wrangle
needs: manip-basics
readings: ~
updated: ~
desc: "\nIntroduction\n------------\n\nEach of the single table verbs comes in three
  additional forms with the suffixes `_if`, `_at`, and `_all`. These **scoped** variants
  allow you to work with multiple variables with a single call:\n\n-   `_if` allows
  you to pick variables based on a predicate function like `is.numeric()` or `is.character()`.\n\n-
  \  `_at` allows you to pick variables using the same syntax as `select()`.\n\n-
  \  `_all` operates on all variables.\n\nThese variants are coupled with `funs()`
  and `vars()` helpers that let you describe which functions you want to apply to
  which variables.\n\nThe scoped verbs are useful because they can allow you to save
  a lot of typing. For example, imagine that you want to group `nycflights13::flights`
  by destination, then compute the mean the delay variables, the distance, and the
  time in the air. That's a lot of typing!\n\n``` r\nlibrary(nycflights13)\n\nflights
  %>%\n  group_by(dest) %>%\n  summarise(\n    dep_delay = mean(dep_delay, na.rm =
  TRUE),\n    arr_delay = mean(arr_delay, na.rm = TRUE),\n    distance = mean(distance,
  na.rm = TRUE),\n    air_time = mean(air_time, na.rm = TRUE)\n  )\n```\n\nWe can
  save a bunch of typing by using `summarise_at()` instead:\n\n``` r\nflights %>%\n
  \ group_by(dest) %>%\n  summarise_at(\n    vars(dep_delay, arr_delay, distance,
  air_time),\n    funs(mean(., na.rm = TRUE))\n  )\n#> # A tibble: 105 x 5\n#>   dest
  \ dep_delay arr_delay distance air_time\n#>   <chr>     <dbl>     <dbl>    <dbl>
  \   <dbl>\n#> 1 ABQ       13.7       4.38    1826     249. \n#> 2 ACK        6.46
  \     4.85     199      42.1\n#> 3 ALB       23.6      14.4      143      31.8\n#>
  4 ANC       12.9      -2.5     3370     413. \n#> 5 ATL       12.5      11.3      757.
  \   113. \n#> # ... with 100 more rows\n```\n\nYou can imagine that this gets even
  more helpful as the number of variables increases.\n\nI'll illustrate the three
  variants in detail for `summarise()`, then show how you can use the same ideas with
  `mutate()` and `filter()`. You'll need the scoped variants of the other verbs less
  frequently, but when you do, it should be straightforward to generalise what you've
  learn here.\n\nSummarise\n---------\n\n### `summarise_all()`\n\nThe simplest variant
  to understand is `summarise_all()`. The first argument is a tibble. The second argument
  is one of more functions wrapped inside of the `funs()` helper:\n\n``` r\ndf <-
  tibble(\n  x = runif(100),\n  y = runif(100),\n  z = runif(100)\n)\nsummarise_all(df,
  funs(mean))\n#> # A tibble: 1 x 3\n#>       x     y     z\n#>   <dbl> <dbl> <dbl>\n#>
  1 0.496 0.521 0.508\nsummarise_all(df, funs(min, max))\n#> # A tibble: 1 x 6\n#>
  \    x_min  y_min  z_min x_max y_max z_max\n#>     <dbl>  <dbl>  <dbl> <dbl> <dbl>
  <dbl>\n#> 1 0.00123 0.0138 0.0187 0.993 0.991 0.990\n```\n\nYou might wonder why
  we need `funs()`. You don't actually need it if you have a single function, but
  it's necessary for technical reasons for more than one function, and always using
  it makes your code more consistent.\n\nYou can also use `funs()` with custom expressions:
  just use a `.` as a pronoun to denote the \"current\" column:\n\n``` r\nsummarise_all(df,
  funs(mean(., na.rm = TRUE)))\n#> # A tibble: 1 x 3\n#>       x     y     z\n#>   <dbl>
  <dbl> <dbl>\n#> 1 0.496 0.521 0.508\n```\n\nNB: unfortunately `funs()` does not
  use the same syntax as purrr - you don't need the `~` in front of a custom function
  like you do in purrr. This is an unfortunate oversight that is relatively hard to
  fix, but will hopefully be resolved in dplyr one day.\n\n### `summarise_at()`\n\n`summarise_at()`
  allows you to pick columns to summarise in the same way as `select()`. There is
  one small difference: you need to wrap the complete selection with the `vars()`
  helper:\n\n``` r\nsummarise_at(df, vars(-z), funs(mean))\n#> # A tibble: 1 x 2\n#>
  \      x     y\n#>   <dbl> <dbl>\n#> 1 0.496 0.521\n```\n\nYou can put anything
  inside `vars()` that you can put inside a call to `select()`:\n\n``` r\nlibrary(nycflights13)\nsummarise_at(flights,
  vars(contains(\"delay\")), funs(mean), na.rm = TRUE)\n#> # A tibble: 1 x 2\n#>   dep_delay
  arr_delay\n#>       <dbl>     <dbl>\n#> 1      12.6      6.90\nsummarise_at(flights,
  vars(starts_with(\"arr\")), funs(mean), na.rm = TRUE)\n#> # A tibble: 1 x 2\n#>
  \  arr_time arr_delay\n#>      <dbl>     <dbl>\n#> 1    1502.      6.90\n```\n\n(Note
  that `na.rm = TRUE` is passed on to `mean()` in the same way as in `purrr::map()`.)\n\nIf
  the function doesn't fit on one line, put each argument on a new line:\n\n``` r\nflights
  %>%\n  group_by(dest) %>% \n  summarise_at(\n    vars(contains(\"delay\"), distance,
  air_time), \n    funs(mean), \n    na.rm = TRUE\n  )\n#> # A tibble: 105 x 5\n#>
  \  dest  dep_delay arr_delay distance air_time\n#>   <chr>     <dbl>     <dbl>    <dbl>
  \   <dbl>\n#> 1 ABQ       13.7       4.38    1826     249. \n#> 2 ACK        6.46
  \     4.85     199      42.1\n#> 3 ALB       23.6      14.4      143      31.8\n#>
  4 ANC       12.9      -2.5     3370     413. \n#> 5 ATL       12.5      11.3      757.
  \   113. \n#> # ... with 100 more rows\n```\n\nBy default, the newly created columns
  have the shortest names needed to uniquely identify the output. See the examples
  in the documentation if you want to force names when they're not otherwise needed.\n\n```
  r\n# Note the use of extra spaces to make the 3rd argument line\n# up - this makes
  it easy to scan the code and see what's different\nsummarise_at(df, vars(x),    funs(mean))\n#>
  # A tibble: 1 x 1\n#>       x\n#>   <dbl>\n#> 1 0.496\nsummarise_at(df, vars(x),
  \   funs(min, max))\n#> # A tibble: 1 x 2\n#>       min   max\n#>     <dbl> <dbl>\n#>
  1 0.00123 0.993\nsummarise_at(df, vars(x, y), funs(mean))\n#> # A tibble: 1 x 2\n#>
  \      x     y\n#>   <dbl> <dbl>\n#> 1 0.496 0.521\nsummarise_at(df, vars(x, y),
  funs(min, max))\n#> # A tibble: 1 x 4\n#>     x_min  y_min x_max y_max\n#>     <dbl>
  \ <dbl> <dbl> <dbl>\n#> 1 0.00123 0.0138 0.993 0.991\n```\n\n### `summarise_if()`\n\n`summarise_if()`
  allows you to pick variables to summarise based on some property of the column,
  specified by a **predicate** function. A predicate function is a function that takes
  a whole column and returns either a single `TRUE` or a single `FALSE`. Commonly
  this a function that tells you if a variable is a specific type like `is.numeric()`,
  `is.character()`, or `is.logical()`.\n\nThis makes it easier to summarise only numeric
  columns:\n\n``` r\nstarwars %>%\n  group_by(species) %>%\n  summarise_if(is.numeric,
  funs(mean), na.rm = TRUE)\n#> # A tibble: 38 x 4\n#>   species  height  mass birth_year\n#>
  \  <chr>     <dbl> <dbl>      <dbl>\n#> 1 Aleena       79    15        NaN\n#> 2
  Besalisk    198   102        NaN\n#> 3 Cerean      198    82         92\n#> 4 Chagrian
  \   196   NaN        NaN\n#> 5 Clawdite    168    55        NaN\n#> # ... with 33
  more rows\n```\n\nMutate\n------\n\n`mutate_all()`, `mutate_if()` and `mutate_at()`
  work in a similar way to their summarise equivalents.\n\n``` r\nmutate_all(df, funs(log10))\n#>
  # A tibble: 100 x 3\n#>         x       y       z\n#>     <dbl>   <dbl>   <dbl>\n#>
  1 -0.514  -0.0141 -0.537 \n#> 2 -0.463  -0.0420 -0.712 \n#> 3 -0.0205 -0.681  -0.257
  \n#> 4 -2.91   -0.473  -0.0337\n#> 5 -0.738  -0.314  -0.866 \n#> # ... with 95 more
  rows\n```\n\nIf you need a transformation that is not already a function, it's easiest
  to create your own function:\n\n``` r\ndouble <- function(x) x * 2\nhalf <- function(x)
  x / 2\n\nmutate_all(df, funs(half, double))\n#> # A tibble: 100 x 9\n#>         x
  \    y     z   x_half y_half z_half x_double y_double z_double\n#>     <dbl> <dbl>
  <dbl>    <dbl>  <dbl>  <dbl>    <dbl>    <dbl>    <dbl>\n#> 1 0.306   0.968 0.290
  0.153     0.484 0.145   0.612      1.94     0.581\n#> 2 0.344   0.908 0.194 0.172
  \    0.454 0.0970  0.688      1.82     0.388\n#> 3 0.954   0.209 0.554 0.477     0.104
  0.277   1.91       0.417    1.11 \n#> 4 0.00123 0.336 0.925 0.000617  0.168 0.463
  \  0.00247    0.672    1.85 \n#> 5 0.183   0.485 0.136 0.0915    0.243 0.0681  0.366
  \     0.971    0.272\n#> # ... with 95 more rows\n```\n\nThe default names are generated
  in the same way as `summarise()`. That means that you may want to use a `transmute()`
  variant if you want to apply multiple transformations and don't want the original
  values:\n\n``` r\ntransmute_all(df, funs(half, double))\n#> # A tibble: 100 x 6\n#>
  \    x_half y_half z_half x_double y_double z_double\n#>      <dbl>  <dbl>  <dbl>
  \   <dbl>    <dbl>    <dbl>\n#> 1 0.153     0.484 0.145   0.612      1.94     0.581\n#>
  2 0.172     0.454 0.0970  0.688      1.82     0.388\n#> 3 0.477     0.104 0.277
  \  1.91       0.417    1.11 \n#> 4 0.000617  0.168 0.463   0.00247    0.672    1.85
  \n#> 5 0.0915    0.243 0.0681  0.366      0.971    0.272\n#> # ... with 95 more
  rows\n```\n\nFilter\n------\n\nThe `filter()` variants work a little differently
  to `summarise()` and `mutate()`. Like `summarise()` and `mutate()` you must choose
  between either all variables (`_all`), selecting variables by name (`_at`), or selecting
  by some property of the variable (`_if`). However, the `funs()` is no longer enough
  because you need to say whether the filtering functions should be combined with
  \"and\" (`&`) or \"or\" (`|`). That means that `funs()` is not enough:\n\n``` r\ndiamonds
  %>% filter_all(funs(. == 0))\n#> Error: `.vars_predicate` must be a call to `all_vars()`
  or `any_vars()`, not list\n```\n\nYou have to be explicit and say you either want
  the rows where the all of the variables equal 0:\n\n``` r\ndiamonds %>% filter_if(is.numeric,
  all_vars(. == 0))\n#> # A tibble: 0 x 10\n#> # ... with 10 variables: carat <dbl>,
  cut <ord>, color <ord>,\n#> #   clarity <ord>, depth <dbl>, table <dbl>, price <int>,
  x <dbl>,\n#> #   y <dbl>, z <dbl>\n```\n\nOr the rows where any of the variables
  equals zero:\n\n``` r\ndiamonds %>% filter_if(is.numeric, any_vars(. == 0))\n#>
  # A tibble: 20 x 10\n#>   carat cut     color clarity depth table price     x     y
  \    z\n#>   <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n#>
  1  1    Premium G     SI2      59.1    59  3142  6.55  6.48     0\n#> 2  1.01 Premium
  H     I1       58.1    59  3167  6.66  6.6      0\n#> 3  1.1  Premium G     SI2
  \     63      59  3696  6.5   6.47     0\n#> 4  1.01 Premium F     SI2      59.2
  \   58  3837  6.5   6.47     0\n#> 5  1.5  Good    G     I1       64      61  4731
  \ 7.15  7.04     0\n#> # ... with 15 more rows\n```\n\nThis is particularly useful
  if you're looking for missing values:\n\n``` r\nflights %>% filter_all(any_vars(is.na(.)))\n#>
  # A tibble: 9,430 x 19\n#>    year month   day dep_time sched_dep_time dep_delay
  arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>\n#>
  1  2013     1     1     1525           1530        -5     1934\n#> 2  2013     1
  \    1     1528           1459        29     2002\n#> 3  2013     1     1     1740
  \          1745        -5     2158\n#> 4  2013     1     1     1807           1738
  \       29     2251\n#> 5  2013     1     1     1939           1840        59       29\n#>
  # ... with 9,425 more rows, and 12 more variables: sched_arr_time <int>,\n#> #   arr_delay
  <dbl>, carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>,
  air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>\n```\n"
