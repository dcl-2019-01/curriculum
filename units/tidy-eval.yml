title: Tidy evaluation
theme: program
needs:
- manip-scoped
- function-basics
readings: ~
updated: ~
desc: "\nIntroduction\n------------\n\nAt some point during the quarter, you may have
  noticed that you were copy-and-pasting the same dplyr snippets again and again.
  You then might have remembered it's a bad idea to have more than three copies of
  the same code and tried to create a function. Unfortunately, if you tried this,
  you would have failed because dplyr verbs work a little differently than most other
  R functions. In this reading, you'll learn what makes dplyr verbs different, and
  a new set of techniques that allow you to wrap them in functions. The underlying
  idea that makes this possible is **tidy evaluation**, and is used throughout the
  tidyverse.\n\nTidy evaluation is a complicated subject. This reading will focus
  on how to do the most common operations, without explaining the theory in-depth.
  If you're curious and want to learn more, the following are useful resources:\n\n-
  \  The [Programming with dplyr](https://dplyr.tidyverse.org/articles/programming.html)
  vignette\n-   The [Tidy evaluation with rlang](https://github.com/rstudio/cheatsheets/blob/master/tidyeval.pdf)
  cheat sheet\n-   Ian Lyttle's [Tidyeval](https://ijlyttle.shinyapps.io/tidyeval/)
  interactive tutorial\n\nQuoted arguments\n----------------\n\nTo understand what
  makes dplyr (and many other tidyverse functions) different, we need some new vocabulary.
  In R, we can divide function arguments into two classes:\n\n-   **Evaluated** arguments
  are the default. Code in an evaluated argument executes the same regardless of whether
  or not it's in a function argument.\n\n-   Automatically **quoted** arguments are
  special. They behave differently depending on whether or not they're inside a function.
  You can tell if anargument is an automatically quoted argument by running the code
  outside of the function call: if you get a different result (like an error!), it's
  a quoted argument.\n\nLet's make this concrete by talking about two important base
  R functions that you learned about early in the class: `$` and `[[`.\n\n`$` automatically
  quotes the variable name. You can see this if you try to use the name outside of
  `$`.\n\n``` r\ndf <- \n  tibble(\n    y = 1,\n    var = 2\n  )\n\ndf$y\n#> [1] 1\ny\n#>
  Error in eval(expr, envir, enclos): object 'y' not found\n```\n\nWhy do we say that
  `$` automatically quotes the variable name? Well, take `[[`. It evaluates its argument,
  so you have to put quotes around it:\n\n``` r\ndf[[\"y\"]]\n#> [1] 1\n```\n\nThe
  advantage of `$` is concision. The advantage of `[[` is that you can refer to variables
  in the data frame indirectly:\n\n``` r\nvar <- \"y\"\ndf[[var]]\n#> [1] 1\n```\n\nIs
  there a way to allow `$` to work indirectly? i.e. is there some way to make this
  code do what we want?\n\n``` r\ndf$var\n#> [1] 2\n```\n\nUnfortunately there's no
  way to do this with base R.\n\n|          | Quoted | Evaluated               |\n|----------|--------|-------------------------|\n|
  Direct   | `df$y` | `df[[\"y\"]]`             |\n| Indirect | \U0001F622      |
  `var <- \"y\"; df[[var]]` |\n\nThe tidyverse, however, supports **unquoting** which
  makes it possible to evaluate arguments that would otherwise be automatically quoted.
  This gives the concision of automatically quoted arguments, while still allowing
  us to use indirection. Take `pull()`, the dplyr equivalent to `$`. If we use it
  naively, it works like `$`:\n\n``` r\ndf %>% pull(y)\n#> [1] 1\n```\n\nBut with
  `quo()` and `!!` (pronounced bang-bang), which you'll learn about shortly, you can
  also refer to a variable indirectly:\n\n``` r\nvar <- quo(y)\ndf %>% pull(!!var)\n#>
  [1] 1\n```\n\nHere, we're not going to focus on what they actually do, but instead
  learn how you apply them in practice.\n\nWrapping quoting functions\n--------------------------\n\nLet's
  see how to apply your knowledge of quoting vs. evaluating arguments to write a wrapper
  around some duplicated dplyr code. Take this hypothetical duplicated dplyr code:\n\n```
  r\ndf %>% group_by(x1) %>% summarize(mean = mean(y1))\ndf %>% group_by(x2) %>% summarize(mean
  = mean(y2))\ndf %>% group_by(x3) %>% summarize(mean = mean(y3))\ndf %>% group_by(x4)
  %>% summarize(mean = mean(y4))\n```\n\nTo create a function we need to perform three
  steps:\n\n1.  Identify what is constant and what we might want to vary, and which
  varying parts are automatically quoted.\n\n2.  Create a function template.\n\n3.
  \ Quote and unquote the automatically quoted arguments.\n\nLooking at the above
  code, I'd say there are three primary things that we might want to vary:\n\n-   The
  input data, which I'll call `df`.\n-   The grouping variable, which I'll call `group_var`.\n-
  \  The summary variable, which I'll call `summary_var`.\n\n`group_var` and `summary_var`
  need to be automatically quoted: they won't work when evaluated outside of the dplyr
  code.\n\nNow we can create the function template using these names for our arguments.\n\n```
  r\ngrouped_mean_1 <- function(df, group_var, summary_var) {\n}\n```\n\nWe then copied
  in the duplicated code and replaced the varying parts with the variable names:\n\n```
  r\ngrouped_mean_1 <- function(df, group_var, summary_var) {\n  df %>% \n    group_by(group_var)
  %>% \n    summarize(mean = mean(summary_var))\n}\n```\n\nThis function doesn't work
  (yet), but it's useful to see the error message we get:\n\n``` r\ngrouped_mean_1(df
  = mpg, group_var = manufacturer, summary_var = hwy)\n#> Error: Column `group_var`
  is unknown\n```\n\nThe error complains that there's no column called `group_var`
  - that shouldn't be a surprise, because we don't want to use the variable `group_var`
  directly; we want to use its contents to refer to `manufacturer`. To fix this problem,
  we need to perform the final step: quoting and unquoting. You can think of quoting
  as being infectious: if you want your function to vary an automatically quoted argument,
  you also need to quote the corresponding argument. Then to refer to the variable
  indirectly, you need to unquote it.\n\n``` r\ngrouped_mean_1 <- function(df, group_var,
  summary_var) {\n  group_var <- enquo(group_var)\n  summary_var <- enquo(summary_var)\n
  \ \n  df %>% \n    group_by(!!group_var) %>% \n    summarize(mean = mean(!!summary_var))\n}\n\ngrouped_mean_1(df
  = mpg, group_var = manufacturer, summary_var = hwy)\n#> # A tibble: 15 x 2\n#>   manufacturer
  \ mean\n#>   <chr>        <dbl>\n#> 1 audi          26.4\n#> 2 chevrolet     21.9\n#>
  3 dodge         17.9\n#> 4 ford          19.4\n#> 5 honda         32.6\n#> # … with
  10 more rows\n```\n\nIf you have eagle eyes, you'll have spotted that I used `enquo()`
  here but I showed you `quo()` before. That's because they have slightly different
  uses: `quo()` captures what you, the function writer types, `enquo()` captures what
  the user has typed:\n\n``` r\nfun_1 <- function(x) quo(x)\nfun_1(a + b)\n#> <quosure>\n#>
  expr: ^x\n#> env:  0x7fc4d9108260\nfun_2 <- function(x) enquo(x)\nfun_2(a + b)\n#>
  <quosure>\n#> expr: ^a + b\n#> env:  0x7fc4d489f510\n```\n\nAs a rule of thumb,
  use `quo()` when you're experimenting interactively at the console, and `enquo()`
  when you're creating a function.\n\nPassing `...`\n-------------\n\nWhat if you
  want to allow the user to pass in any number of variables to `group_by()`? You might
  have noticed that some functions, like scoped verbs and the purrr functions, take
  `...` as a final argument, allowing you to specify additional arguments to their
  functions. We can use that same functionality here.\n\n``` r\ngrouped_mean_2 <-
  function(df, summary_var, ...) {\n  summary_var <- enquo(summary_var)\n  \n  df
  %>% \n    group_by(...) %>% \n    summarize(mean = mean(!!summary_var))\n}\n\ngrouped_mean_2(df
  = mpg, summary_var = hwy, manufacturer, model)\n#> # A tibble: 38 x 3\n#> # Groups:
  \  manufacturer [15]\n#>   manufacturer model               mean\n#>   <chr>        <chr>
  \             <dbl>\n#> 1 audi         a4                  28.3\n#> 2 audi         a4
  quattro          25.8\n#> 3 audi         a6 quattro          24  \n#> 4 chevrolet
  \   c1500 suburban 2wd  17.8\n#> 5 chevrolet    corvette            24.8\n#> # …
  with 33 more rows\n```\n\nNotice that with `...`, we didn't have to use `enquo()`
  or `!!`. `...` takes care of all the quoting and unquoting for you.\n\nYou can also
  use `...` to pass in full expressions to dplyr verbs.\n\n``` r\nfilter_fun <- function(df,
  ...) {\n  df %>% \n    filter(...)\n}\n\nfilter_fun(df = mpg, year == 1999)\n#>
  # A tibble: 117 x 11\n#>   manufacturer model  displ  year   cyl trans drv     cty
  \  hwy fl    class\n#>   <chr>        <chr>  <dbl> <int> <int> <chr> <chr> <int>
  <int> <chr> <chr>\n#> 1 audi         a4       1.8  1999     4 auto… f        18
  \   29 p     comp…\n#> 2 audi         a4       1.8  1999     4 manu… f        21
  \   29 p     comp…\n#> 3 audi         a4       2.8  1999     6 auto… f        16
  \   26 p     comp…\n#> 4 audi         a4       2.8  1999     6 manu… f        18
  \   26 p     comp…\n#> 5 audi         a4 qu…   1.8  1999     4 manu… 4        18
  \   26 p     comp…\n#> # … with 112 more rows\n```\n\nThis will work with any number
  of expressions. For example, say we wanted to filter on multiple conditions.\n\n```
  r\nfilter_fun(df = mpg, year == 1999, class == \"minivan\")\n#> # A tibble: 6 x
  11\n#>   manufacturer model  displ  year   cyl trans drv     cty   hwy fl    class\n#>
  \  <chr>        <chr>  <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n#>
  1 dodge        carav…   2.4  1999     4 auto… f        18    24 r     mini…\n#>
  2 dodge        carav…   3    1999     6 auto… f        17    24 r     mini…\n#>
  3 dodge        carav…   3.3  1999     6 auto… f        16    22 r     mini…\n#>
  4 dodge        carav…   3.3  1999     6 auto… f        16    22 r     mini…\n#>
  5 dodge        carav…   3.8  1999     6 auto… f        15    22 r     mini…\n#>
  # … with 1 more row\n```\n\nAssigning names\n---------------\n\n`grouped_mean_1()`
  doesn't name its new variables in an informative way.\n\n``` r\ngrouped_mean_1(df
  = mpg, group_var = manufacturer, summary_var = hwy)\n#> # A tibble: 15 x 2\n#>   manufacturer
  \ mean\n#>   <chr>        <dbl>\n#> 1 audi          26.4\n#> 2 chevrolet     21.9\n#>
  3 dodge         17.9\n#> 4 ford          19.4\n#> 5 honda         32.6\n#> # … with
  10 more rows\n```\n\nIt would be nice if we could name the `mean` column something
  like `hwy_mean` or `cty_mean`, depending on what `summary_var` the user passed in.\n\nMaybe
  we can just apply what we've learned about `enquo()` and `!!`.\n\n``` r\ngrouped_mean_3
  <- function(df, group_var, summary_var, summary_var_name) {\n  group_var <- enquo(group_var)\n
  \ summary_var <- enquo(summary_var)\n  summary_var_name <- enquo(summary_var_name)\n
  \ \n  df %>% \n    group_by(!!group_var) %>% \n    summarize(!!summary_var_name
  = mean(!!summary_var))\n}\n\ngrouped_mean_3(\n  df = mpg,\n  group_var = manufacturer,\n
  \ summary_var = hwy,\n  summary_var_name = hwy_mean\n)\n#> Error: <text>:8:34: unexpected
  '='\n#> 7:     group_by(!!group_var) %>% \n#> 8:     summarize(!!summary_var_name
  =\n#>                                     ^\n```\n\nUnfortunately, that doesn't
  quite work. It turns out that you can't use `!!` on both sides of an `=`. Instead,
  you have to use `:=`.\n\n``` r\ngrouped_mean_3 <- function(df, group_var, summary_var,
  summary_var_name) {\n  group_var <- enquo(group_var)\n  summary_var <- enquo(summary_var)\n
  \ summary_var_name <- enquo(summary_var_name)\n  \n  df %>% \n    group_by(!!group_var)
  %>% \n    summarize(!!summary_var_name := mean(!!summary_var))\n}\n\ngrouped_mean_3(\n
  \ df = mpg,\n  group_var = manufacturer,\n  summary_var = hwy,\n  summary_var_name
  = hwy_mean\n)\n#> # A tibble: 15 x 2\n#>   manufacturer hwy_mean\n#>   <chr>           <dbl>\n#>
  1 audi             26.4\n#> 2 chevrolet        21.9\n#> 3 dodge            17.9\n#>
  4 ford             19.4\n#> 5 honda            32.6\n#> # … with 10 more rows\n```\n\nPassing
  vectors with `!!!`\n--------------------------\n\nSay you want to use `recode()`
  to recode a variable.\n\n``` r\nmpg %>% \n  mutate(drv = recode(drv, \"f\" = \"front\",
  \"r\" = \"rear\", \"4\" = \"four\")) %>% \n  select(drv)\n#> # A tibble: 234 x 1\n#>
  \  drv  \n#>   <chr>\n#> 1 front\n#> 2 front\n#> 3 front\n#> 4 front\n#> 5 front\n#>
  # … with 229 more rows\n```\n\nIt will often be useful to place your recoding mapping
  in a parameter. For example, say you want to recode multiple variables in the same
  way, or you envision having to change the mapping later on.\n\nWe can store the
  mapping in a named character vector.\n\n``` r\nrecode_key <- c(\"f\" = \"front\",
  \"r\" = \"rear\", \"4\" = \"four\")\n```\n\nHowever, now `recode()` doesn't work.\n\n```
  r\nmpg %>% \n  mutate(drv = recode(drv, recode_key)) %>% \n  select(drv)\n#> Error:
  Argument 2 must be named, not unnamed\n```\n\n`recode()`, like `group_by()`, `summarize()`,
  and the other dplyr functions, quotes its input. We therefore need to tell it to
  evaluate `recode_key` immediately. Let's try `!!`.\n\n``` r\nmpg %>% \n  mutate(drv
  = recode(drv, !!recode_key)) %>% \n  select(drv)\n#> Error: Argument 2 must be named,
  not unnamed\n```\n\n`!!` doesn't work because `recode_key` is a vector. Not only
  do we need to immediately evaluate `recode_key`, we also need to unpack its contents.
  To do so, we'll use `!!!`.\n\n``` r\nmpg %>% \n  mutate(drv = recode(drv, !!!recode_key))
  %>% \n  select(drv)\n#> # A tibble: 234 x 1\n#>   drv  \n#>   <chr>\n#> 1 front\n#>
  2 front\n#> 3 front\n#> 4 front\n#> 5 front\n#> # … with 229 more rows\n```\n"
