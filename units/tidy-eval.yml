title: Tidy evaluation
theme: program
needs:
- manip-scoped
- function-basics
readings: ~
updated: ~
desc: "\n## Introduction\n\nAt some point during the quarter, you may have noticed
  that you were\ncopy-and-pasting the same dplyr snippets again and again. You then
  might\nhave remembered it’s a bad idea to have more than three copies of the\nsame
  code and tried to create a function. Unfortunately if you tried\nthis, you would
  have failed because dplyr verbs work a little\ndifferently to most other R functions.
  In this reading, you’ll learn\nexactly what makes dplyr verbs different, and a new
  set of techniques\nthat allow you to wrap them in functions. The underlying idea
  that makes\nthis possible is **tidy evaluation**, and is used throughout the\ntidyverse.\n\n##
  Quoted arguments\n\nTo understand what makes dplyr (and many other tidyverse functions)\ndifferent,
  we need some new vocabulary. In R, we can divide function\narguments into two classes:\n\n
  \ - **Evaluated** arguments are the default. Code in an evaluated\n    argument
  executes the same regardless of whether or not its in a\n    function argument.\n\n
  \ - Automatically **quoted** arguments are special; they behave\n    differently
  depending on whether or not they’re inside a function.\n    You can tell if an argument
  is automatically quoted argument by\n    running the code outside of the function
  call: if you get a\n    different result (like an error\\!), it’s a quoted argument.\n\nLet’s
  make this concrete by talking about two important base R functions\nthat you learned
  about early in the class: `$` and `[[`. When we use `$`\nthe variable name is automatically
  quoted; if we try and use the name\noutside of `$` it doesn’t work.\n\n``` r\ndf
  <- data.frame(\n  y = 1,\n  var = 2\n)\n\ndf$y\n#> [1] 1\n\ny\n#> Error in eval(expr,
  envir, enclos): object 'y' not found\n```\n\nWhy do we say that `$` automatically
  quotes the variable name? Well,\ntake `[[`. It evaluates its argument so you have
  to put quotes around\nit:\n\n``` r\ndf[[\"y\"]]\n#> [1] 1\n```\n\nThe advantage
  of `$` is concision. The advantage of `[[` is that you can\nrefer to variables in
  the data frame indirectly:\n\n``` r\nvar <- \"y\"\ndf[[var]]\n#> [1] 1\n```\n\nIs
  there a way to allow `$` to work indirectly? i.e. is there some way\nto make this
  code do what we want?\n\n``` r\ndf$var\n#> [1] 2\n```\n\nUnfortunately there’s no
  way to do this with base R.\n\n|          | Quoted | Evaluated               |\n|
  -------- | ------ | ----------------------- |\n| Direct   | `df$y` | `df[[\"y\"]]`
  \            |\n| Indirect | \U0001F622      | `var <- \"y\"; df[[var]]` |\n\nThe
  tidyverse, however, supports **unquoting** which makes it possible\nto evaluate
  arguments that would otherwise be automatically quoted. This\ngives the concision
  of automatically quoted arguments, while still\nallowing us to use indirection.
  Take `pull()`, the dplyr equivalent to\n`$`. If we use it naively, it works like
  `$`:\n\n``` r\ndf %>% pull(y)\n#> [1] 1\n```\n\nBut with `quo()` and `!!` (pronounced
  bang-bang), which you’ll learn\nabout shortly, you can also refer to a variable
  indirectly:\n\n``` r\nvar <- quo(y)\ndf %>% pull(!!var)\n#> [1] 1\n```\n\nHere,
  we’re not going to focus on what they actually do, but instead\nlearn how you apply
  them in practice.\n\n## Wrapping quoting functions\n\nLet’s see how to apply your
  knowledge of quoting vs. evaluating\narguments to write a wrapper around some duplicated
  dplyr code. Take\nthis hypothetical duplicated dplyr code:\n\n``` r\ndf %>% group_by(x1)
  %>% summarise(mean = mean(y1))\ndf %>% group_by(x2) %>% summarise(mean = mean(y2))\ndf
  %>% group_by(x3) %>% summarise(mean = mean(y3))\ndf %>% group_by(x4) %>% summarise(mean
  = mean(y4))\n```\n\nTo create a function we need to perform three steps:\n\n1.  Identify
  what is constant and what we might want to vary, and which\n    varying parts are
  automatically quoted.\n\n2.  Create a function template.\n\n3.  Quote and unquote
  the automatically quoted arguments.\n\nLooking at the above code, I’d say there
  are three primary things that\nwe might want to vary:\n\n  - The input data, which
  I’ll call `df`.\n  - The grouping variable, which I’ll call `group_var`.\n  - The
  summary variable, which I’ll call `summary_var`.\n\n`group_var` and `summary_var`
  need to be automatically quoted: they\nwon’t work when evaluated outside of the
  dplyr code.\n\nNow we can create the function template using these names for our\narguments.\n\n```
  r\ngrouped_mean <- function(df, group_var, summary_var) {\n}\n```\n\nI then copied
  in the duplicated code and replaced the varying parts with\nthe variable names:\n\n```
  r\ngrouped_mean <- function(df, group_var, summary_var) {\n  df %>% \n    group_by(group_var)
  %>% \n    summarise(mean = mean(summary_var))\n}\n```\n\nThis function doesn’t work
  (yet), but it’s useful to see the error\nmessage we get:\n\n``` r\ngrouped_mean(mtcars,
  cyl, mpg)\n#> Error in grouped_df_impl(data, unname(vars), drop): Column `group_var`
  is unknown\n```\n\nThe error complains that there’s no column called `group_var`
  - that\nshouldn’t be a surprise, because we don’t want to use the variable\n`group_var`
  directly; we want to use its contents to refer to `cyl`. To\nfix this problem we
  need to perform the final step: quoting and\nunquoting. You can think of quoting
  as being infectious: if you want\nyour function to vary an automated quoted argument,
  you also need to\nquote the corresponding argument. Then to refer to the variable\nindirectly,
  you need to unquote it.\n\n``` r\ngrouped_mean <- function(df, group_var, summary_var)
  {\n  group_var <- enquo(group_var)\n  summary_var <- enquo(summary_var)\n  \n  df
  %>% \n    group_by(!!group_var) %>% \n    summarise(mean = mean(!!summary_var))\n}\n```\n\nIf
  you have eagle eyes, you’ll have spotted that I used `enquo()` here\nbut I showed
  you `quo()` before. That’s because they have slightly\ndifferent uses: `quo()` captures
  what you, the function writer types,\n`enquo()` captures what the user has typed:\n\n```
  r\nfun1 <- function(x) quo(x)\nfun1(a + b)\n#> <quosure>\n#>   expr: ^x\n#>   env:
  \ 0x7fbd01679110\n\nfun2 <- function(x) enquo(x)\nfun2(a + b)\n#> <quosure>\n#>
  \  expr: ^a + b\n#>   env:  0x7fbcfcd3da78\n```\n\nAs a rule of thumb, use `quo()`
  when you’re experimenting interactively\nat the console, and `enquo()` when you’re
  creating a function.\n\n## Theory\n\nTo finish off, watch this short video to learn
  the basics of the\nunderlying\ntheory.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nERXS3ssntw\"
  frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen>\n\n</iframe>\n"
