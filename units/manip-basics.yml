title: Manipulation basics
theme: wrangle
needs: data-basics
readings: ~
updated: 2018-01
desc: "\n``` r\nlibrary(tidyverse)\n#> ── Attaching packages ─────────────────────────────────────────────────────
  tidyverse 1.2.0.9000 ──\n#> ✔ ggplot2 2.2.1.9000     ✔ purrr   0.2.4     \n#> ✔
  tibble  1.4.1          ✔ dplyr   0.7.4     \n#> ✔ tidyr   0.7.2          ✔ stringr
  1.2.0     \n#> ✔ readr   1.1.1          ✔ forcats 0.2.0\n#> ── Conflicts ─────────────────────────────────────────────────────────────
  tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()
  \   masks stats::lag()\nlibrary(nycflights13)\n```\n\n## dplyr basics\n\nIn this
  reading you will going to learn about three important dplyr\nfunctions that give
  you basic data manipulation power:\n\n  - Pick observations by their values (`filter()`).\n
  \ - Create new variables with functions of existing variables\n    (`mutate()`).\n
  \ - Collapse many values down to a single summary (`summarise()`).\n\nThese can
  all be used in conjunction with `group_by()` which changes the\nscope of each function
  from operating on the entire dataset to operating\non it group-by-group.\n\n(Use
  the [data transformation\ncheatsheet](https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf)\nto
  jog your memory, and learn about other dplyr functions we’ll cover in\nthe future)\n\nAll
  dplyr verbs work similarly:\n\n1.  The first argument is a data frame.\n\n2.  The
  subsequent arguments describe what to do with the data frame.\n\n3.  The result
  is a new data frame.\n\nTogether these properties make it easy to chain together
  multiple simple\nsteps to achieve a complex result. Let’s dive in and see how these
  verbs\nwork.\n\n## Filter rows with `filter()`\n\n`filter()` allows you to subset
  observations based on their values. The\nfirst argument is the name of the data
  frame. The second and subsequent\narguments are the expressions that filter the
  data frame. For example,\nwe can select all flights on January 1st with:\n\n```
  r\nfilter(flights, month == 1, day == 1)\n#> # A tibble: 842 x 19\n#>     year month
  \  day dep_t… sched_… dep_d… arr_… sched… arr_d… carr… flig…\n#>    <int> <int>
  <int>  <int>   <int>  <dbl> <int>  <int>  <dbl> <chr> <int>\n#>  1  2013     1     1
  \   517     515   2.00   830    819  11.0  UA     1545\n#>  2  2013     1     1
  \   533     529   4.00   850    830  20.0  UA     1714\n#>  3  2013     1     1
  \   542     540   2.00   923    850  33.0  AA     1141\n#>  4  2013     1     1
  \   544     545  -1.00  1004   1022 -18.0  B6      725\n#>  5  2013     1     1
  \   554     600  -6.00   812    837 -25.0  DL      461\n#>  6  2013     1     1
  \   554     558  -4.00   740    728  12.0  UA     1696\n#>  7  2013     1     1
  \   555     600  -5.00   913    854  19.0  B6      507\n#>  8  2013     1     1
  \   557     600  -3.00   709    723 -14.0  EV     5708\n#>  9  2013     1     1
  \   557     600  -3.00   838    846 - 8.00 B6       79\n#> 10  2013     1     1
  \   558     600  -2.00   753    745   8.00 AA      301\n#> # ... with 832 more rows,
  and 8 more variables: tailnum <chr>, origin\n#> #   <chr>, dest <chr>, air_time
  <dbl>, distance <dbl>, hour <dbl>, minute\n#> #   <dbl>, time_hour <dttm>\n```\n\nWhen
  you run that line of code, dplyr executes the filtering operation\nand returns a
  new data frame. dplyr functions never modify their inputs,\nso if you want to save
  the result, you’ll need to use the assignment\noperator, `<-`:\n\n``` r\njan1 <-
  filter(flights, month == 1, day == 1)\n```\n\nR either prints out the results, or
  saves them to a variable. If you\nwant to do both, you can wrap the assignment in
  parentheses:\n\n``` r\n(dec25 <- filter(flights, month == 12, day == 25))\n#> #
  A tibble: 719 x 19\n#>     year month   day dep_t… sched_… dep_d… arr_… sched… arr_d…
  carr… flig…\n#>    <int> <int> <int>  <int>   <int>  <dbl> <int>  <int>  <dbl> <chr>
  <int>\n#>  1  2013    12    25    456     500  -4.00   649    651 - 2.00 US     1895\n#>
  \ 2  2013    12    25    524     515   9.00   805    814 - 9.00 UA     1016\n#>
  \ 3  2013    12    25    542     540   2.00   832    850 -18.0  AA     2243\n#>
  \ 4  2013    12    25    546     550  -4.00  1022   1027 - 5.00 B6      939\n#>
  \ 5  2013    12    25    556     600  -4.00   730    745 -15.0  AA      301\n#>
  \ 6  2013    12    25    557     600  -3.00   743    752 - 9.00 DL      731\n#>
  \ 7  2013    12    25    557     600  -3.00   818    831 -13.0  DL      904\n#>
  \ 8  2013    12    25    559     600  -1.00   855    856 - 1.00 B6      371\n#>
  \ 9  2013    12    25    559     600  -1.00   849    855 - 6.00 B6      605\n#>
  10  2013    12    25    600     600   0      850    846   4.00 B6      583\n#> #
  ... with 709 more rows, and 8 more variables: tailnum <chr>, origin\n#> #   <chr>,
  dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute\n#> #   <dbl>, time_hour
  <dttm>\n```\n\n### Comparisons\n\nTo use filtering effectively, you have to know
  how to select the\nobservations that you want using the comparison operators. R
  provides\nthe standard suite: `>`, `>=`, `<`, `<=`, `!=` (not equal), and `==`\n(equal).\n\nWhen
  you’re starting out with R, the easiest mistake to make is to use\n`=` instead of
  `==` when testing for equality. When this happens you’ll\nget an informative error:\n\n```
  r\nfilter(flights, month = 1)\n#> Error: `month` (`month = 1`) must not be named,
  do you need `==`?\n```\n\n### Logical operators\n\nMultiple arguments to `filter()`
  are combined with “and”: every\nexpression must be true in order for a row to be
  included in the output.\nFor other types of combinations, you’ll need to use Boolean
  operators\nyourself: `&` is “and”, `|` is “or”, and `!` is “not”.\n\nThe following
  code finds all flights that departed in November or\nDecember:\n\n``` r\nfilter(flights,
  month == 11 | month == 12)\n```\n\nThe order of operations doesn’t work like English.
  You can’t write\n`filter(flights, month == 11 | 12)`, which you might literally
  translate\ninto “finds all flights that departed in November or December”. Instead\nit
  finds all months that equal `11 | 12`, an expression that evaluates\nto `TRUE`.
  In a numeric context (like here), `TRUE` becomes one, so this\nfinds all flights
  in January, not November or December. This is quite\nconfusing\\!\n\nA useful short-hand
  for this problem is `x %in% y`. This will select\nevery row where `x` is one of
  the values in `y`. We could use it to\nrewrite the code above:\n\n``` r\nnov_dec
  <- filter(flights, month %in% c(11, 12))\n```\n\nAs well as `&` and `|`, R also
  has `&&` and `||`. Don’t use them here\\!\nYou’ll learn more about them later.\n\n##
  Add new variables with `mutate()`\n\nBesides selecting sets of existing columns,
  it’s often useful to add new\ncolumns that are functions of existing columns. That’s
  the job of\n`mutate()`.\n\n`mutate()` always adds new columns at the end of your
  dataset so we’ll\nstart by creating a narrower dataset so we can see the new variables.\nRemember
  that when you’re in RStudio, the easiest way to see all the\ncolumns is `View()`.\n\n```
  r\nflights_sml <- select(flights, \n  year:day, \n  ends_with(\"delay\"), \n  distance,
  \n  air_time\n)\nmutate(flights_sml,\n  gain = arr_delay - dep_delay,\n  speed =
  distance / air_time * 60\n)\n#> # A tibble: 336,776 x 9\n#>     year month   day
  dep_delay arr_delay distance air_time   gain speed\n#>    <int> <int> <int>     <dbl>
  \    <dbl>    <dbl>    <dbl>  <dbl> <dbl>\n#>  1  2013     1     1      2.00     11.0
  \     1400    227     9.00   370\n#>  2  2013     1     1      4.00     20.0      1416
  \   227    16.0    374\n#>  3  2013     1     1      2.00     33.0      1089    160
  \   31.0    408\n#>  4  2013     1     1     -1.00    -18.0      1576    183   -17.0
  \   517\n#>  5  2013     1     1     -6.00    -25.0       762    116   -19.0    394\n#>
  \ 6  2013     1     1     -4.00     12.0       719    150    16.0    288\n#>  7
  \ 2013     1     1     -5.00     19.0      1065    158    24.0    404\n#>  8  2013
  \    1     1     -3.00    -14.0       229     53.0 -11.0    259\n#>  9  2013     1
  \    1     -3.00    - 8.00      944    140   - 5.00   405\n#> 10  2013     1     1
  \    -2.00      8.00      733    138    10.0    319\n#> # ... with 336,766 more
  rows\n```\n\nNote that you can refer to columns that you’ve just created:\n\n```
  r\nmutate(flights_sml,\n  gain = arr_delay - dep_delay,\n  hours = air_time / 60,\n
  \ gain_per_hour = gain / hours\n)\n#> # A tibble: 336,776 x 10\n#>     year month
  \  day dep_delay arr_delay dista… air_…   gain hours gain_p…\n#>    <int> <int>
  <int>     <dbl>     <dbl>  <dbl> <dbl>  <dbl> <dbl>   <dbl>\n#>  1  2013     1     1
  \     2.00     11.0    1400 227     9.00 3.78     2.38\n#>  2  2013     1     1
  \     4.00     20.0    1416 227    16.0  3.78     4.23\n#>  3  2013     1     1
  \     2.00     33.0    1089 160    31.0  2.67    11.6 \n#>  4  2013     1     1
  \    -1.00    -18.0    1576 183   -17.0  3.05   - 5.57\n#>  5  2013     1     1
  \    -6.00    -25.0     762 116   -19.0  1.93   - 9.83\n#>  6  2013     1     1
  \    -4.00     12.0     719 150    16.0  2.50     6.40\n#>  7  2013     1     1
  \    -5.00     19.0    1065 158    24.0  2.63     9.11\n#>  8  2013     1     1
  \    -3.00    -14.0     229  53.0 -11.0  0.883  -12.5 \n#>  9  2013     1     1
  \    -3.00    - 8.00    944 140   - 5.00 2.33   - 2.14\n#> 10  2013     1     1
  \    -2.00      8.00    733 138    10.0  2.30     4.35\n#> # ... with 336,766 more
  rows\n```\n\n## Grouped summaries with `summarise()`\n\nThe last key verb is `summarise()`.
  It collapses a data frame to a\nsingle row:\n\n``` r\nsummarise(flights, delay =
  mean(dep_delay, na.rm = TRUE))\n#> # A tibble: 1 x 1\n#>   delay\n#>   <dbl>\n#>
  1  12.6\n```\n\n(`na.rm = TRUE` removes the missing values so they don’t affect
  the\nfinal summary)\n\n`summarise()` is not terribly useful unless we pair it with\n`group_by()`.
  This changes the unit of analysis from the complete\ndataset to individual groups.
  Then, when you use the dplyr verbs on a\ngrouped data frame they’ll be automatically
  applied “by group”. For\nexample, if we applied exactly the same code to a data
  frame grouped by\ndate, we get the average delay per date:\n\n``` r\nby_day <- group_by(flights,
  year, month, day)\nsummarise(by_day, delay = mean(dep_delay, na.rm = TRUE))\n#>
  # A tibble: 365 x 4\n#> # Groups: year, month [?]\n#>     year month   day delay\n#>
  \   <int> <int> <int> <dbl>\n#>  1  2013     1     1 11.5 \n#>  2  2013     1     2
  13.9 \n#>  3  2013     1     3 11.0 \n#>  4  2013     1     4  8.95\n#>  5  2013
  \    1     5  5.73\n#>  6  2013     1     6  7.15\n#>  7  2013     1     7  5.42\n#>
  \ 8  2013     1     8  2.55\n#>  9  2013     1     9  2.28\n#> 10  2013     1    10
  \ 2.84\n#> # ... with 355 more rows\n```\n\nTogether `group_by()` and `summarise()`
  provide one of the tools that\nyou’ll use most commonly when working with dplyr:
  grouped summaries. But\nbefore we go any further with this, we need to introduce
  a powerful new\nidea: the pipe.\n\n## Combining multiple operations with the pipe\n\nImagine
  that we want to explore the relationship between the distance\nand average delay
  for each location. Using what you know about dplyr,\nyou might write code like this:\n\n```
  r\nby_dest <- group_by(flights, dest)\ndelay <- summarise(by_dest,\n  count = n(),\n
  \ dist = mean(distance, na.rm = TRUE),\n  delay = mean(arr_delay, na.rm = TRUE)\n)\ndelay
  <- filter(delay, count > 20, dest != \"HNL\")\n\n# It looks like delays increase
  with distance up to ~750 miles \n# and then decrease. Maybe as flights get longer
  there's more \n# ability to make up delays in the air?\nggplot(data = delay, mapping
  = aes(x = dist, y = delay)) +\n  geom_point(aes(size = count), alpha = 1/3) +\n
  \ geom_smooth(se = FALSE)\n#> `geom_smooth()` using method = 'loess' and formula
  'y ~ x'\n```\n\n![](manip-basics_files/figure-gfm/unnamed-chunk-13-1.png)<!-- -->\n\nThere
  are three steps to prepare this data:\n\n1.  Group flights by destination.\n\n2.
  \ Summarise to compute distance, average delay, and number of flights.\n\n3.  Filter
  to remove noisy points and Honolulu airport, which is almost\n    twice as far away
  as the next closest airport.\n\nThis code is a little frustrating to write because
  we have to give each\nintermediate data frame a name, even though we don’t care
  about it.\nNaming things is hard, so this slows down our analysis.\n\nThere’s another
  way to tackle the same problem with the pipe, `%>%`:\n\n``` r\ndelays <- flights
  %>% \n  group_by(dest) %>% \n  summarise(\n    count = n(),\n    dist = mean(distance,
  na.rm = TRUE),\n    delay = mean(arr_delay, na.rm = TRUE)\n  ) %>% \n  filter(count
  > 20, dest != \"HNL\")\n```\n\nThis focuses on the transformations, not what’s being
  transformed, which\nmakes the code easier to read. You can read it as a series of
  imperative\nstatements: group, then summarise, then filter. As suggested by this\nreading,
  a good way to pronounce `%>%` when reading code is “then”.\n\nBehind the scenes,
  `x %>% f(y)` turns into `f(x, y)`, and `x %>% f(y)\n%>% g(z)` turns into `g(f(x,
  y), z)` and so on. You can use the pipe to\nrewrite multiple operations in a way
  that you can read left-to-right,\ntop-to-bottom. We’ll use piping frequently from
  now on because it\nconsiderably improves the readability of code, and we’ll come
  back to it\nin more detail later on.\n"
