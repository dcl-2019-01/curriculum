title: Manipulation basics
theme: wrangle
needs: data-basics
readings: ~
updated: 2018-01
desc: "\n``` r\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n\ndplyr basics\n------------\n\nIn
  this reading you will going to learn about three important dplyr functions that
  give you basic data manipulation power:\n\n-   Pick observations by their values
  (`filter()`).\n-   Create new variables with functions of existing variables (`mutate()`).\n-
  \  Collapse many values down to a single summary (`summarize()`).\n\nThese can all
  be used in conjunction with `group_by()` which changes the scope of each function
  from operating on the entire dataset to operating on it group-by-group.\n\n(Use
  the [data transformation cheatsheet](https://github.com/rstudio/cheatsheets/blob/master/data-transformation.pdf)
  to jog your memory, and learn about other dplyr functions we'll cover in the future)\n\nAll
  dplyr verbs work similarly:\n\n1.  The first argument is a data frame.\n\n2.  The
  subsequent arguments describe what to do with the data frame.\n\n3.  The result
  is a new data frame.\n\nTogether these properties make it easy to chain together
  multiple simple steps to achieve a complex result. Let's dive in and see how these
  verbs work.\n\nFilter rows with `filter()`\n---------------------------\n\n`filter()`
  allows you to subset observations based on their values. The first argument is the
  name of the data frame. The second and subsequent arguments are the expressions
  that filter the data frame. For example, we can select all flights on January 1st
  with:\n\n``` r\nflights %>% \n  filter(month == 1, day == 1)\n#> # A tibble: 842
  x 19\n#>     year month   day dep_time sched_dep_time dep_delay arr_time\n#>    <int>
  <int> <int>    <int>          <int>     <dbl>    <int>\n#>  1  2013     1     1
  \     517            515         2      830\n#>  2  2013     1     1      533            529
  \        4      850\n#>  3  2013     1     1      542            540         2      923\n#>
  \ 4  2013     1     1      544            545        -1     1004\n#>  5  2013     1
  \    1      554            600        -6      812\n#>  6  2013     1     1      554
  \           558        -4      740\n#>  7  2013     1     1      555            600
  \       -5      913\n#>  8  2013     1     1      557            600        -3      709\n#>
  \ 9  2013     1     1      557            600        -3      838\n#> 10  2013     1
  \    1      558            600        -2      753\n#> # … with 832 more rows, and
  12 more variables: sched_arr_time <int>,\n#> #   arr_delay <dbl>, carrier <chr>,
  flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>, distance
  <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>\n```\n\nWhen you run that
  line of code, dplyr executes the filtering operation and returns a new data frame.
  dplyr functions never modify their inputs, so if you want to save the result, you'll
  need to use the assignment operator, `<-`:\n\n``` r\njan1 <-\n  flights %>% \n  filter(month
  == 1, day == 1)\n```\n\nR either prints out the results, or saves them to a variable.
  If you want to do both, you can wrap the assignment in parentheses:\n\n``` r\n(dec25
  <- flights %>% filter(month == 12, day == 25))\n#> # A tibble: 719 x 19\n#>     year
  month   day dep_time sched_dep_time dep_delay arr_time\n#>    <int> <int> <int>
  \   <int>          <int>     <dbl>    <int>\n#>  1  2013    12    25      456            500
  \       -4      649\n#>  2  2013    12    25      524            515         9      805\n#>
  \ 3  2013    12    25      542            540         2      832\n#>  4  2013    12
  \   25      546            550        -4     1022\n#>  5  2013    12    25      556
  \           600        -4      730\n#>  6  2013    12    25      557            600
  \       -3      743\n#>  7  2013    12    25      557            600        -3      818\n#>
  \ 8  2013    12    25      559            600        -1      855\n#>  9  2013    12
  \   25      559            600        -1      849\n#> 10  2013    12    25      600
  \           600         0      850\n#> # … with 709 more rows, and 12 more variables:
  sched_arr_time <int>,\n#> #   arr_delay <dbl>, carrier <chr>, flight <int>, tailnum
  <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#>
  #   minute <dbl>, time_hour <dttm>\n```\n\n### Comparisons\n\nTo use filtering effectively,
  you have to know how to select the observations that you want using the comparison
  operators. R provides the standard suite: `>`, `>=`, `<`, `<=`, `!=` (not equal),
  and `==` (equal).\n\nWhen you're starting out with R, the easiest mistake to make
  is to use `=` instead of `==` when testing for equality. When this happens you'll
  get an informative error:\n\n``` r\nflights %>% \n  filter(month = 1)\n#> Error:
  `month` (`month = 1`) must not be named, do you need `==`?\n```\n\n### Logical operators\n\nMultiple
  arguments to `filter()` are combined with \"and\": every expression must be true
  in order for a row to be included in the output. For other types of combinations,
  you'll need to use Boolean operators yourself: `&` is \"and\", `|` is \"or\", and
  `!` is \"not\".\n\nThe following code finds all flights that departed in November
  or December:\n\n``` r\nflights %>% \n  filter(month == 11 | month == 12)\n```\n\nThe
  order of operations doesn't work like English. You can't write `filter(flights,
  month == 11 | 12)`, which you might literally translate into \"finds all flights
  that departed in November or December\". Instead it finds all months that equal
  `11 | 12`, an expression that evaluates to `TRUE`. In a numeric context (like here),
  `TRUE` becomes one, so this finds all flights in January, not November or December.
  This is quite confusing!\n\nA useful short-hand for this problem is `x %in% y`.
  This will select every row where `x` is one of the values in `y`. We could use it
  to rewrite the code above:\n\n``` r\nnov_dec <- \n  flights %>% \n  filter(month
  %in% c(11, 12))\n```\n\nAs well as `&` and `|`, R also has `&&` and `||`. Don't
  use them here! You'll learn more about them later.\n\nAdd new variables with `mutate()`\n---------------------------------\n\nBesides
  selecting sets of existing columns, it's often useful to add new columns that are
  functions of existing columns. That's the job of `mutate()`.\n\n`mutate()` always
  adds new columns at the end of your dataset so we'll start by creating a narrower
  dataset so we can see the new variables. Remember that when you're in RStudio, the
  easiest way to see all the columns is `View()`.\n\n``` r\nflights_sml <- \n  flights
  %>% \n  select( \n    year:day, \n    ends_with(\"delay\"), \n    distance, \n    air_time\n
  \ )\n\nflights_sml %>% \n  mutate(\n    gain = arr_delay - dep_delay,\n    speed
  = distance / air_time * 60\n  )\n#> # A tibble: 336,776 x 9\n#>     year month   day
  dep_delay arr_delay distance air_time  gain speed\n#>    <int> <int> <int>     <dbl>
  \    <dbl>    <dbl>    <dbl> <dbl> <dbl>\n#>  1  2013     1     1         2        11
  \    1400      227     9  370.\n#>  2  2013     1     1         4        20     1416
  \     227    16  374.\n#>  3  2013     1     1         2        33     1089      160
  \   31  408.\n#>  4  2013     1     1        -1       -18     1576      183   -17
  \ 517.\n#>  5  2013     1     1        -6       -25      762      116   -19  394.\n#>
  \ 6  2013     1     1        -4        12      719      150    16  288.\n#>  7  2013
  \    1     1        -5        19     1065      158    24  404.\n#>  8  2013     1
  \    1        -3       -14      229       53   -11  259.\n#>  9  2013     1     1
  \       -3        -8      944      140    -5  405.\n#> 10  2013     1     1        -2
  \        8      733      138    10  319.\n#> # … with 336,766 more rows\n```\n\nNote
  that you can refer to columns that you've just created:\n\n``` r\nflights_sml %>%
  \n  mutate(\n    gain = arr_delay - dep_delay,\n    hours = air_time / 60,\n    gain_per_hour
  = gain / hours\n  )\n#> # A tibble: 336,776 x 10\n#>     year month   day dep_delay
  arr_delay distance air_time  gain hours\n#>    <int> <int> <int>     <dbl>     <dbl>
  \   <dbl>    <dbl> <dbl> <dbl>\n#>  1  2013     1     1         2        11     1400
  \     227     9 3.78 \n#>  2  2013     1     1         4        20     1416      227
  \   16 3.78 \n#>  3  2013     1     1         2        33     1089      160    31
  2.67 \n#>  4  2013     1     1        -1       -18     1576      183   -17 3.05
  \n#>  5  2013     1     1        -6       -25      762      116   -19 1.93 \n#>
  \ 6  2013     1     1        -4        12      719      150    16 2.5  \n#>  7  2013
  \    1     1        -5        19     1065      158    24 2.63 \n#>  8  2013     1
  \    1        -3       -14      229       53   -11 0.883\n#>  9  2013     1     1
  \       -3        -8      944      140    -5 2.33 \n#> 10  2013     1     1        -2
  \        8      733      138    10 2.3  \n#> # … with 336,766 more rows, and 1 more
  variable: gain_per_hour <dbl>\n```\n\nGrouped summaries with `summarize()`\n------------------------------------\n\nThe
  last key verb is `summarize()`. It collapses a data frame to a single row:\n\n```
  r\nflights %>% \n  summarize(delay = mean(dep_delay, na.rm = TRUE))\n#> # A tibble:
  1 x 1\n#>   delay\n#>   <dbl>\n#> 1  12.6\n```\n\n(`na.rm = TRUE` removes the missing
  values so they don't affect the final summary)\n\n`summarize()` is not terribly
  useful unless we pair it with `group_by()`. This changes the unit of analysis from
  the complete dataset to individual groups. Then, when you use the dplyr verbs on
  a grouped data frame they'll be automatically applied \"by group\". For example,
  if we applied exactly the same code to a data frame grouped by date, we get the
  average delay per date:\n\n``` r\nby_day <- \n  flights %>% \n  group_by(year, month,
  day)\n\nby_day %>% \n  summarize(delay = mean(dep_delay, na.rm = TRUE))\n#> # A
  tibble: 365 x 4\n#> # Groups:   year, month [?]\n#>     year month   day delay\n#>
  \   <int> <int> <int> <dbl>\n#>  1  2013     1     1 11.5 \n#>  2  2013     1     2
  13.9 \n#>  3  2013     1     3 11.0 \n#>  4  2013     1     4  8.95\n#>  5  2013
  \    1     5  5.73\n#>  6  2013     1     6  7.15\n#>  7  2013     1     7  5.42\n#>
  \ 8  2013     1     8  2.55\n#>  9  2013     1     9  2.28\n#> 10  2013     1    10
  \ 2.84\n#> # … with 355 more rows\n```\n\nTogether `group_by()` and `summarize()`
  provide one of the tools that you'll use most commonly when working with dplyr:
  grouped summaries. But before we go any further with this, we need to introduce
  a powerful new idea: the pipe.\n\nCombining multiple operations with the pipe\n-------------------------------------------\n\nImagine
  that we want to explore the relationship between the distance and average delay
  for each location. Using what you know about dplyr and not using pipes, you might
  write code like this:\n\n``` r\nby_dest <- group_by(flights, dest)\ndelay <- \n
  \ summarize(\n    by_dest,\n    count = n(),\n    dist = mean(distance, na.rm =
  TRUE),\n    delay = mean(arr_delay, na.rm = TRUE)\n  )\ndelay <- filter(delay, count
  > 20, dest != \"HNL\")\n\n# It looks like delays increase with distance up to ~750
  miles \n# and then decrease. Maybe as flights get longer there's more \n# ability
  to make up delays in the air?\nggplot(data = delay, mapping = aes(x = dist, y =
  delay)) +\n  geom_point(aes(size = count), alpha = 1/3) +\n  geom_smooth(se = FALSE)\n#>
  `geom_smooth()` using method = 'loess' and formula 'y ~ x'\n```\n\n![](manip-basics_files/figure-markdown_github/unnamed-chunk-13-1.png)\n\nThere
  are three steps to prepare this data:\n\n1.  Group flights by destination.\n\n2.
  \ Summarize to compute distance, average delay, and number of flights.\n\n3.  Filter
  to remove noisy points and Honolulu airport, which is almost twice as far away as
  the next closest airport.\n\nThis code is a little frustrating to write because
  we have to give each intermediate data frame a name, even though we don't care about
  it. Naming things is hard, so this slows down our analysis.\n\nIt's better to tackle
  the same problem with the pipe, `%>%`:\n\n``` r\ndelays <- \n  flights %>% \n  group_by(dest)
  %>% \n  summarize(\n    count = n(),\n    dist = mean(distance, na.rm = TRUE),\n
  \   delay = mean(arr_delay, na.rm = TRUE)\n  ) %>% \n  filter(count > 20, dest !=
  \"HNL\")\n```\n\nThis focuses on the transformations, not what's being transformed,
  which makes the code easier to read. You can read it as a series of imperative statements:
  group, then summarize, then filter. As suggested by this reading, a good way to
  pronounce `%>%` when reading code is \"then\".\n\nBehind the scenes, `x %>% f(y)`
  turns into `f(x, y)`, and `x %>% f(y) %>% g(z)` turns into `g(f(x, y), z)` and so
  on. You can use the pipe to rewrite multiple operations in a way that you can read
  left-to-right, top-to-bottom. We'll use piping frequently from now on because it
  considerably improves the readability of code, and we'll come back to it in more
  detail later on.\n"
