title: Exploratory data analysis (1D)
theme: explore
needs:
- vis-basics
- manip-basics
readings:
- book: r4ds-7.1
- book: r4ds-7.2
- book: r4ds-7.3
updated: ~
desc: "\nExploratory data analysis is partly a set of techniques, but is mostly a
  mindset: you want to remain open to what the data is telling you.\n\n``` r\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n\nWhenever
  you start working with a new variable, it's a really good idea to first take a look
  at the variable by itself, before you start combining it with other variables. As
  well as the visual techniques you'll learn in the readings, another quick and dirty
  function is `count()`.\n\n`df %>% count(grp)` is shorthand for `df %>% group_by(grp)
  %>% summarise(n = n())`.\n\n``` r\nflights %>% count(carrier)\n#> # A tibble: 16
  x 2\n#>    carrier     n\n#>    <chr>   <int>\n#>  1 9E      18460\n#>  2 AA      32729\n#>
  \ 3 AS        714\n#>  4 B6      54635\n#>  5 DL      48110\n#>  6 EV      54173\n#>
  \ 7 F9        685\n#>  8 FL       3260\n#>  9 HA        342\n#> 10 MQ      26397\n#>
  11 OO         32\n#> 12 UA      58665\n#> 13 US      20536\n#> 14 VX       5162\n#>
  15 WN      12275\n#> 16 YV        601\n```\n\nIt has two convenient arguments:\n\n-
  \  `sort = TRUE` automatically arranges the result so the most common values are
  at the top\n\n    ``` r\n    flights %>% count(dest, sort = TRUE)\n    #> # A tibble:
  105 x 2\n    #>    dest      n\n    #>    <chr> <int>\n    #>  1 ORD   17283\n    #>
  \ 2 ATL   17215\n    #>  3 LAX   16174\n    #>  4 BOS   15508\n    #>  5 MCO   14082\n
  \   #>  6 CLT   14064\n    #>  7 SFO   13331\n    #>  8 FLL   12055\n    #>  9 MIA
  \  11728\n    #> 10 DCA    9705\n    #> # ... with 95 more rows\n    ```\n\n-   `wt
  = my_variable` switches from a count to a weighted sum of `my_variable`. For example,
  the following code gives the total distance traveled by each carrier. It is particularly
  useful if you have data that has already been aggregated.\n\n    ``` r\n    flights
  %>% count(carrier, wt = distance)\n    #> # A tibble: 16 x 2\n    #>    carrier
  \        n\n    #>    <chr>       <dbl>\n    #>  1 9E       9788152.\n    #>  2
  AA      43864584.\n    #>  3 AS       1715028.\n    #>  4 B6      58384137.\n    #>
  \ 5 DL      59507317.\n    #>  6 EV      30498951.\n    #>  7 F9       1109700.\n
  \   #>  8 FL       2167344.\n    #>  9 HA       1704186.\n    #> 10 MQ      15033955.\n
  \   #> 11 OO         16026.\n    #> 12 UA      89705524.\n    #> 13 US      11365778.\n
  \   #> 14 VX      12902327.\n    #> 15 WN      12229203.\n    #> 16 YV        225395.\n
  \   ```\n\nYou can also `count()` the value of expression. This is a useful technique
  to get a quick count of how many missing values there are:\n\n``` r\nflights %>%
  count(is.na(dep_delay))\n#> # A tibble: 2 x 2\n#>   `is.na(dep_delay)`      n\n#>
  \  <lgl>               <int>\n#> 1 FALSE              328521\n#> 2 TRUE                 8255\n\nflights
  %>% count(\n  dep_missing = is.na(dep_time), \n  arr_missing = is.na(arr_time)\n)\n#>
  # A tibble: 3 x 3\n#>   dep_missing arr_missing      n\n#>   <lgl>       <lgl>        <int>\n#>
  1 FALSE       FALSE       328063\n#> 2 FALSE       TRUE           458\n#> 3 TRUE
  \       TRUE          8255\n```\n\nYou can combine `count()` with the `cut_*` functions
  from ggplot2 to compute histograms \"by hand\":\n\n``` r\n# five bins of equal widths\nflights
  %>% count(cut_interval(arr_delay, 5))\n#> # A tibble: 6 x 2\n#>   `cut_interval(arr_delay,
  5)`      n\n#>   <fct>                         <int>\n#> 1 [-86,186]                    323807\n#>
  2 (186,457]                      3465\n#> 3 (457,729]                        45\n#>
  4 (729,1e+03]                      25\n#> 5 (1e+03,1.27e+03]                  4\n#>
  6 <NA>                           9430\n\n# five bins with approximately equal numbers
  of points\nflights %>% count(cut_number(arr_delay, 5))\n#> # A tibble: 6 x 2\n#>
  \  `cut_number(arr_delay, 5)`     n\n#>   <fct>                      <int>\n#> 1
  [-86,-19]                  70875\n#> 2 (-19,-10]                  61570\n#> 3 (-10,1]
  \                   66972\n#> 4 (1,21]                     62970\n#> 5 (21,1.27e+03]
  \             64959\n#> 6 <NA>                        9430\n\n# hourly bins\nflights
  %>% count(cut_width(arr_delay, 60, boundary = 0))\n#> # A tibble: 22 x 2\n#>    `cut_width(arr_delay,
  60, boundary = 0)`      n\n#>    <fct>                                     <int>\n#>
  \ 1 [-120,-60]                                  240\n#>  2 (-60,0]                                  194102\n#>
  \ 3 (0,60]                                   105215\n#>  4 (60,120]                                  17755\n#>
  \ 5 (120,180]                                  6191\n#>  6 (180,240]                                  2291\n#>
  \ 7 (240,300]                                   941\n#>  8 (300,360]                                   365\n#>
  \ 9 (360,420]                                   144\n#> 10 (420,480]                                    37\n#>
  # ... with 12 more rows\n```\n"
