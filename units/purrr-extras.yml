title: Other purrr functions
theme: program
needs: purrr-basics
readings: ~
updated: ~
desc: "\nIn this reading, you'll learn about two more map variants, `map_dfr()` and
  `map_dfc()`. Then, you'll learn about `walk()`, as well as some useful purrr functions
  that work with functions that return either `TRUE` or `FALSE`.\n\nThe purrr package
  contains more functions that we can cover. The [purrr cheatsheet](https://github.com/rstudio/cheatsheets/raw/master/purrr.pdf)
  is a great way to see an overview of the package or find a helpful function when
  you encounter a new type of iteration problem.\n\nmap functions that output tibbles\n---------------------------------\n\nYou
  already know how to choose the appropriate map function ending to produce an atomic
  vector or list. There are also map function variants that produce a single tibble.\n\nWith
  these map functions, the assembly line worker creates a tibble for each input element,
  and the output conveyor belt ends up with a collection of tibbles. The worker then
  combines all the small tibbles into a single, larger tibble.\n\nThere are multiple
  ways to combine smaller tibbles into a larger tibble. purrr provides two options:\n\n-
  \  `map_dfr()` stacks the tibbles on top of each other.\n-   `map_dfc()` stacks
  them side-by-side.\n\nThere are `_dfr` and `_dfc` variants of `pmap()` and `map2()`
  as well.\n\n### `_dfr`\n\nYou will often use `map_dfr()` when reading in data. The
  following code reads in several very simple csv files that contain the names of
  different dinosaur genera.\n\n``` r\nread_csv(\"purrr-extras/file_001.csv\")\n```\n\n
  \   ## # A tibble: 1 x 2\n    ##      id genus        \n    ##   <int> <chr>        \n
  \   ## 1     1 Hoplitosaurus\n\n``` r\nread_csv(\"purrr-extras/file_002.csv\")\n```\n\n
  \   ## # A tibble: 1 x 2\n    ##      id genus        \n    ##   <int> <chr>        \n
  \   ## 1     2 Herrerasaurus\n\n``` r\nread_csv(\"purrr-extras/file_003.csv\")\n```\n\n
  \   ## # A tibble: 1 x 2\n    ##      id genus      \n    ##   <int> <chr>      \n
  \   ## 1     3 Coelophysis\n\n`read_csv()` produces a tibble, and so we can use
  `map_dfr()` to map over all three file names and bind the resulting individual tibbles
  into a single tibble.\n\n``` r\nfiles <- str_glue(\"purrr-extras/file_00{1:3}.csv\")\nfiles\n```\n\n
  \   ## purrr-extras/file_001.csv\n    ## purrr-extras/file_002.csv\n    ## purrr-extras/file_003.csv\n\n```
  r\nfiles %>% \n  map_dfr(read_csv)\n```\n\n    ## # A tibble: 3 x 2\n    ##      id
  genus        \n    ##   <int> <chr>        \n    ## 1     1 Hoplitosaurus\n    ##
  2     2 Herrerasaurus\n    ## 3     3 Coelophysis\n\nThe result is a tibble with
  three rows and two columns, because `map_dfr()` aligns the columns of the individual
  tibbles by name.\n\nThe individual tibbles can have different numbers of rows or
  columns. `map_dfr()` creates a column for each unique column name.\n\n``` r\nread_csv(\"purrr-extras/file_004.csv\")\n```\n\n
  \   ## # A tibble: 2 x 3\n    ##      id genus         start_period \n    ##   <int>
  <chr>         <chr>        \n    ## 1     4 Dilophosaurus Sinemurian   \n    ##
  2     5 Segisaurus    Pliensbachian\n\n``` r\nc(files, \"purrr-extras/file_004.csv\")
  %>% \n  map_dfr(read_csv)\n```\n\n    ## # A tibble: 5 x 3\n    ##      id genus
  \        start_period \n    ##   <int> <chr>         <chr>        \n    ## 1     1
  Hoplitosaurus <NA>         \n    ## 2     2 Herrerasaurus <NA>         \n    ##
  3     3 Coelophysis   <NA>         \n    ## 4     4 Dilophosaurus Sinemurian   \n
  \   ## 5     5 Segisaurus    Pliensbachian\n\nIf some of the individual tibbles
  lack a column that others have, `map_dfr()` fills in with `NA` values.\n\n### `_dfc`\n\n`map_dfc()`
  is typically less useful than `map_dfr()`, because it relies on row position to
  stack the tibbles side-by-side. Row position is prone to error, and it will often
  be difficult to check if the data in each row is aligned correctly. However, if
  you have data with variables in different places and are positive the rows are aligned,
  `map_dfc()` may be appropriate.\n\nUnfortunately, even if the individual tibbles
  contain a unique identifier for each row, `map_dfc()` doesn't use the identifiers
  to verify that the rows are aligned correctly, nor does it combine identically named
  columns.\n\n``` r\nread_csv(\"purrr-extras/file_005.csv\")\n```\n\n    ## # A tibble:
  1 x 3\n    ##      id diet      start_period\n    ##   <int> <chr>     <chr>       \n
  \   ## 1     1 herbivore Barremian\n\n``` r\nc(\"purrr-extras/file_001.csv\", \"purrr-extras/file_005.csv\")
  %>% \n  map_dfc(read_csv)\n```\n\n    ## # A tibble: 1 x 5\n    ##      id genus
  \          id1 diet      start_period\n    ##   <int> <chr>         <int> <chr>
  \    <chr>       \n    ## 1     1 Hoplitosaurus     1 herbivore Barremian\n\nInstead,
  you end up with a duplicated column.\n\nTherefore, if you have a unique identifier
  for each row, it is *much* better to use the identifier to join them together.\n\n```
  r\nleft_join(\n  read_csv(\"purrr-extras/file_001.csv\"),\n  read_csv(\"purrr-extras/file_005.csv\"),\n
  \ by = \"id\"\n)\n```\n\n    ## # A tibble: 1 x 4\n    ##      id genus         diet
  \     start_period\n    ##   <int> <chr>         <chr>     <chr>       \n    ##
  1     1 Hoplitosaurus herbivore Barremian\n\nFinally, because `map_dfc()` combines
  tibbles by row position, the tibbles can have different numbers of columns, but
  must have the same number of rows.\n\nThe following files have different numbers
  of rows, and so `map_dfc()` produces an error.\n\n``` r\nread_csv(\"purrr-extras/file_006.csv\")\n```\n\n
  \   ## # A tibble: 2 x 2\n    ##   diet      start_period\n    ##   <chr>     <chr>
  \      \n    ## 1 herbivore Barremian   \n    ## 2 carnivore Albian\n\n``` r\nc(\"purrr-extras/file_001.csv\",
  \"purrr-extras/file_006.csv\") %>% \n  map_dfc(read_csv)\n```\n\n    ## Error in
  cbind_all(x): Argument 2 must be length 1, not 2\n\nWalk\n----\n\nThis short section
  discusses `walk()`. The walk functions work similarly to the map functions, but
  you use them when you're interested in applying a function that performs an action
  instead of producing data (e.g., `print()`).\n\n-   [Walk](http://r4ds.had.co.nz/iteration.html#walk)
  \\[r4ds-21.8\\]\n\nPredicate functions\n-------------------\n\npurrr has some useful
  functions that work with *predicate functions*, which are functions that return
  a single `TRUE` or `FALSE`. For example, `keep()` and `discard()` iterate over a
  vector and keep or discard only those elements for which the predicate function
  returns `TRUE`.\n\n-   [Predicate functions](http://r4ds.had.co.nz/iteration.html#predicate-functions)
  \\[r4ds-21.9.1\\]\n"
