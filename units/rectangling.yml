title: Data rectangling
theme: wrangle
needs: list-cols
readings: ~
updated: ~
desc: "\nData rectangling is the process of turning non-rectangular data into\ntidy
  tibbles. The term was [coined\nby](https://speakerdeck.com/jennybc/data-rectangling)
  [Jenny\nBryan](https://www.stat.ubc.ca/~jenny/). Here we’re going to focus on\ndeeply
  nested lists as generated by JSON, a very common data type for\nweb APIs.\n\nTo
  work with JSON we need the jsonlite package, which I recommend\nloading before the
  tidyverse. (Both purrr and jsonlite provide a flatten\nfunction; if you load jsonlite
  second, you’ll get that function instead\nof the one from purrr.)\n\n``` r\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(repurrrsive)\n```\n\nWe’re
  going to use some data from Jenny’s repurrrsive package, which\nyou’ll need to install
  from GitHub. We’ll also use the GitHub version\nof purrr which fixes some bugs that
  will make your life easier.\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"jennybc/repurrrsive\")\ndevtools::install_github(\"tidyverse/purrr\")\n```\n\n##
  JSON\n\nJSON is a popular data exchange format that made up of three simple\ncomponents:\n\n
  \ - **Values**, like numbers, `true`, `false`, and strings inside double\n    quotes.\n
  \   \n    ``` json\n    true\n    1.345\n    \"this is a string\"\n    ```\n\n  -
  **Arrays**, sequences of values surrounded in square brackets. JSON\n    arrays
  are like R’s lists: you can have anything inside an array\n    including other arrays.\n
  \   \n    ``` json\n    [1, 2, 3, 10, 120]\n    [\"this\", \"is\", \"a\", \"string\"]\n
  \   [\"can arrays mix types?\", true, 100]\n    ```\n\n  - **Objects**, name-value
  pairs separated by colons. Objects are like\n    named lists.\n    \n    ``` json\n
  \   {\n      \"key\": \"value\",\n      \"name\": \"Hadley\",\n      \"company\":
  \"RStudio\"\n    }\n    ```\n\nArrays and objects can be nested arbitrarily: it’s
  common to have arrays\nof objects, and objects with array values. You can load a
  json file into\nR with `jsonlite::read_json()`. Both arrays and objects are turned
  into\nR lists: objects become named lists, and arrays become unnamed lists.\n\n##
  An API of Ice and Fire\n\nLet’s start with a fairly simple example: information
  about Game of\nThrone characters from the [API of Ice and\nFire](https://anapioficeandfire.com)
  stored in `repurrrsive::got_chars`.\nThe goal is to create a tibble with one row
  for each character.\n\n### Inspect\n\nThe first challenge is just figuring out what
  this data looks like.\nHopefully your instinct is to try `str()`. This is a great
  instinct, but\nit’s not very helpful here because `str()` will prints pages and
  pages\nof output. Another option, if you’re willing to live (a little)\ndangerously,
  is to use a [daily build](https://dailies.rstudio.com) of\nRStudio which has a good
  interactive explorer that you can activate\nwith:\n\n``` r\nView(got_chars)\n```\n\nOtherwise,
  you can use a powerful and general technique: understand the\nlist by peeling it
  apart one layer at a time. To do that you need to\nfirst figure out if you have
  an *array* (an unnamed list, which you\nshould subset with an integer), or an *object*
  (a named list, which you\nshould subset with a string). You can figure that our
  using `names()`:\n\n``` r\nnames(got_chars)\n#> NULL\nlength(got_chars)\n#> [1]
  29\n\none <- got_chars[[1]]\nstr(one)\n#> List of 18\n#>  $ url        : chr \"http://www.anapioficeandfire.com/api/characters/1022\"\n#>
  \ $ id         : int 1022\n#>  $ name       : chr \"Theon Greyjoy\"\n#>  $ gender
  \    : chr \"Male\"\n#>  $ culture    : chr \"Ironborn\"\n#>  $ born       : chr
  \"In 278 AC or 279 AC, at Pyke\"\n#>  $ died       : chr \"\"\n#>  $ alive      :
  logi TRUE\n#>  $ titles     : chr [1:3] \"Prince of Winterfell\" \"Captain of Sea
  Bitch\" \"Lord of the Iron Islands (by law of the green lands)\"\n#>  $ aliases
  \   : chr [1:4] \"Prince of Fools\" \"Theon Turncloak\" \"Reek\" \"Theon Kinslayer\"\n#>
  \ $ father     : chr \"\"\n#>  $ mother     : chr \"\"\n#>  $ spouse     : chr \"\"\n#>
  \ $ allegiances: chr \"House Greyjoy of Pyke\"\n#>  $ books      : chr [1:3] \"A
  Game of Thrones\" \"A Storm of Swords\" \"A Feast for Crows\"\n#>  $ povBooks   :
  chr [1:2] \"A Clash of Kings\" \"A Dance with Dragons\"\n#>  $ tvSeries   : chr
  [1:6] \"Season 1\" \"Season 2\" \"Season 3\" \"Season 4\" ...\n#>  $ playedBy   :
  chr \"Alfie Allen\"\n```\n\nHere it we have an array of 29 objects, where each object
  is a person.\nTypically JSON files have consistent structure, so if the first element\nof
  the list is a person, it’s likely all the other elements will be too.\n\n### Rectangle\n\nImagine
  we want to collapse some of this information into a tibble with\none row for each
  person. For the sake of this example, lets say we want\nthe following variables:\n\n
  \ - The name of the character.\n  - Their unique identifier.\n  - If they’re alive.\n
  \ - Their gender.\n  - The books they appear in.\n\nTo extract each of these variables
  we need to use a map function. The\nfirst four are straightforward: you just need
  to identify the name of\nthe component and its type.\n\n``` r\ngot_chars %>% map_chr(\"name\")\n#>
  \ [1] \"Theon Greyjoy\"      \"Tyrion Lannister\"   \"Victarion Greyjoy\" \n#>  [4]
  \"Will\"               \"Areo Hotah\"         \"Chett\"             \n#>  [7] \"Cressen\"
  \           \"Arianne Martell\"    \"Daenerys Targaryen\"\n#> [10] \"Davos Seaworth\"
  \    \"Arya Stark\"         \"Arys Oakheart\"     \n#> [13] \"Asha Greyjoy\"       \"Barristan
  Selmy\"    \"Varamyr\"           \n#> [16] \"Brandon Stark\"      \"Brienne of Tarth\"
  \  \"Catelyn Stark\"     \n#> [19] \"Cersei Lannister\"   \"Eddard Stark\"       \"Jaime
  Lannister\"   \n#> [22] \"Jon Connington\"     \"Jon Snow\"           \"Aeron Greyjoy\"
  \    \n#> [25] \"Kevan Lannister\"    \"Melisandre\"         \"Merrett Frey\"      \n#>
  [28] \"Quentyn Martell\"    \"Sansa Stark\"\ngot_chars %>% map_int(\"id\")\n#>  [1]
  1022 1052 1074 1109 1166 1267 1295  130 1303 1319  148  149  150  168\n#> [15] 2066
  \ 208  216  232  238  339  529  576  583   60  605  743  751  844\n#> [29]  957\ngot_chars
  %>% map_lgl(\"alive\")\n#>  [1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE
  \ TRUE  TRUE  TRUE\n#> [12] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE
  \ TRUE  TRUE\n#> [23]  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE\ngot_chars %>% map_chr(\"gender\")\n#>
  \ [1] \"Male\"   \"Male\"   \"Male\"   \"Male\"   \"Male\"   \"Male\"   \"Male\"
  \ \n#>  [8] \"Female\" \"Female\" \"Male\"   \"Female\" \"Male\"   \"Female\" \"Male\"
  \ \n#> [15] \"Male\"   \"Male\"   \"Female\" \"Female\" \"Female\" \"Male\"   \"Male\"
  \ \n#> [22] \"Male\"   \"Male\"   \"Male\"   \"Male\"   \"Female\" \"Male\"   \"Male\"
  \ \n#> [29] \"Female\"\n```\n\nThe list of books is a little trickier:\n\n``` r\ngot_chars
  %>% map_chr(\"books\")\n#> Error: Result 1 is not a length 1 atomic vector\n```\n\nThis
  is because the `map_` functions want scalars: the contract for a\nmap function is
  that it always returns a vector the same length as the\ninput. So instead of returning
  an atomic vector, here we need a list, as\nproduced by `map()`:\n\n``` r\ngot_chars
  %>% map(\"books\") %>% head(10) %>% str()\n#> List of 10\n#>  $ : chr [1:3] \"A
  Game of Thrones\" \"A Storm of Swords\" \"A Feast for Crows\"\n#>  $ : chr [1:2]
  \"A Feast for Crows\" \"The World of Ice and Fire\"\n#>  $ : chr [1:3] \"A Game
  of Thrones\" \"A Clash of Kings\" \"A Storm of Swords\"\n#>  $ : chr \"A Clash of
  Kings\"\n#>  $ : chr [1:3] \"A Game of Thrones\" \"A Clash of Kings\" \"A Storm
  of Swords\"\n#>  $ : chr [1:2] \"A Game of Thrones\" \"A Clash of Kings\"\n#>  $
  : chr [1:2] \"A Storm of Swords\" \"A Feast for Crows\"\n#>  $ : chr [1:4] \"A Game
  of Thrones\" \"A Clash of Kings\" \"A Storm of Swords\" \"A Dance with Dragons\"\n#>
  \ $ : chr \"A Feast for Crows\"\n#>  $ : chr \"A Feast for Crows\"\n```\n\nOnce
  we confirmed that we can extract each variable individually, we can\ncombine them
  into a single tibble:\n\n``` r\ngot_tibble <- tibble(\n  name = got_chars %>% map_chr(\"name\"),\n
  \ id = got_chars %>% map_int(\"id\"),\n  alive = got_chars %>% map_lgl(\"alive\"),\n
  \ gender = got_chars %>% map_chr(\"gender\"),\n  books = got_chars %>% map(\"books\")\n)\ngot_tibble\n#>
  # A tibble: 29 x 5\n#>    name                  id alive gender books    \n#>    <chr>
  \             <int> <lgl> <chr>  <list>   \n#>  1 Theon Greyjoy       1022 T     Male
  \  <chr [3]>\n#>  2 Tyrion Lannister    1052 T     Male   <chr [2]>\n#>  3 Victarion
  Greyjoy   1074 T     Male   <chr [3]>\n#>  4 Will                1109 F     Male
  \  <chr [1]>\n#>  5 Areo Hotah          1166 T     Male   <chr [3]>\n#>  6 Chett
  \              1267 F     Male   <chr [2]>\n#>  7 Cressen             1295 F     Male
  \  <chr [2]>\n#>  8 Arianne Martell      130 T     Female <chr [4]>\n#>  9 Daenerys
  Targaryen  1303 T     Female <chr [1]>\n#> 10 Davos Seaworth      1319 T     Male
  \  <chr [1]>\n#> # ... with 19 more rows\n```\n\nOur rectangling is complete\\!\n\n##
  GitHub repos\n\nNow, let’s tackle a slightly more challenging problem: some information\nabout
  GitHub repository that’s stored in `repurrrsive::gh_repos`.\n\n### Inspect\n\nThe
  first challenge is always inspecting the data. We start by figuring\nout if we have
  an array or an object at the top level:\n\n``` r\nnames(gh_repos)\n#> NULL\nlength(gh_repos)\n#>
  [1] 6\n```\n\nHere names is `NULL`, so we have an array and should subset by position:\n\n```
  r\none <- gh_repos[[1]]\n```\n\nIt’s worth trying `str()` again, but unfortunately
  this object is\n*still* too complicated. Let’s index into it again:\n\n``` r\nnames(one)\n#>
  NULL\nlength(one)\n#> [1] 30\n\n# No names, so we can index by position\none_one
  <- one[[1]]\n```\n\nLet’s try `str()` once more:\n\n``` r\nstr(one_one)\n#> List
  of 68\n#>  $ id               : int 61160198\n#>  $ name             : chr \"after\"\n#>
  \ $ full_name        : chr \"gaborcsardi/after\"\n#>  $ owner            :List of
  17\n#>   ..$ login              : chr \"gaborcsardi\"\n#>   ..$ id                 :
  int 660288\n#>   ..$ avatar_url         : chr \"https://avatars.githubusercontent.com/u/660288?v=3\"\n#>
  \  ..$ gravatar_id        : chr \"\"\n#>   ..$ url                : chr \"https://api.github.com/users/gaborcsardi\"\n#>
  \  ..$ html_url           : chr \"https://github.com/gaborcsardi\"\n#>   ..$ followers_url
  \     : chr \"https://api.github.com/users/gaborcsardi/followers\"\n#>   ..$ following_url
  \     : chr \"https://api.github.com/users/gaborcsardi/following{/other_user}\"\n#>
  \  ..$ gists_url          : chr \"https://api.github.com/users/gaborcsardi/gists{/gist_id}\"\n#>
  \  ..$ starred_url        : chr \"https://api.github.com/users/gaborcsardi/starred{/owner}{/repo}\"\n#>
  \  ..$ subscriptions_url  : chr \"https://api.github.com/users/gaborcsardi/subscriptions\"\n#>
  \  ..$ organizations_url  : chr \"https://api.github.com/users/gaborcsardi/orgs\"\n#>
  \  ..$ repos_url          : chr \"https://api.github.com/users/gaborcsardi/repos\"\n#>
  \  ..$ events_url         : chr \"https://api.github.com/users/gaborcsardi/events{/privacy}\"\n#>
  \  ..$ received_events_url: chr \"https://api.github.com/users/gaborcsardi/received_events\"\n#>
  \  ..$ type               : chr \"User\"\n#>   ..$ site_admin         : logi FALSE\n#>
  \ $ private          : logi FALSE\n#>  $ html_url         : chr \"https://github.com/gaborcsardi/after\"\n#>
  \ $ description      : chr \"Run Code in the Background\"\n#>  $ fork             :
  logi FALSE\n#>  $ url              : chr \"https://api.github.com/repos/gaborcsardi/after\"\n#>
  \ $ forks_url        : chr \"https://api.github.com/repos/gaborcsardi/after/forks\"\n#>
  \ $ keys_url         : chr \"https://api.github.com/repos/gaborcsardi/after/keys{/key_id}\"\n#>
  \ $ collaborators_url: chr \"https://api.github.com/repos/gaborcsardi/after/collaborators{/collaborator}\"\n#>
  \ $ teams_url        : chr \"https://api.github.com/repos/gaborcsardi/after/teams\"\n#>
  \ $ hooks_url        : chr \"https://api.github.com/repos/gaborcsardi/after/hooks\"\n#>
  \ $ issue_events_url : chr \"https://api.github.com/repos/gaborcsardi/after/issues/events{/number}\"\n#>
  \ $ events_url       : chr \"https://api.github.com/repos/gaborcsardi/after/events\"\n#>
  \ $ assignees_url    : chr \"https://api.github.com/repos/gaborcsardi/after/assignees{/user}\"\n#>
  \ $ branches_url     : chr \"https://api.github.com/repos/gaborcsardi/after/branches{/branch}\"\n#>
  \ $ tags_url         : chr \"https://api.github.com/repos/gaborcsardi/after/tags\"\n#>
  \ $ blobs_url        : chr \"https://api.github.com/repos/gaborcsardi/after/git/blobs{/sha}\"\n#>
  \ $ git_tags_url     : chr \"https://api.github.com/repos/gaborcsardi/after/git/tags{/sha}\"\n#>
  \ $ git_refs_url     : chr \"https://api.github.com/repos/gaborcsardi/after/git/refs{/sha}\"\n#>
  \ $ trees_url        : chr \"https://api.github.com/repos/gaborcsardi/after/git/trees{/sha}\"\n#>
  \ $ statuses_url     : chr \"https://api.github.com/repos/gaborcsardi/after/statuses/{sha}\"\n#>
  \ $ languages_url    : chr \"https://api.github.com/repos/gaborcsardi/after/languages\"\n#>
  \ $ stargazers_url   : chr \"https://api.github.com/repos/gaborcsardi/after/stargazers\"\n#>
  \ $ contributors_url : chr \"https://api.github.com/repos/gaborcsardi/after/contributors\"\n#>
  \ $ subscribers_url  : chr \"https://api.github.com/repos/gaborcsardi/after/subscribers\"\n#>
  \ $ subscription_url : chr \"https://api.github.com/repos/gaborcsardi/after/subscription\"\n#>
  \ $ commits_url      : chr \"https://api.github.com/repos/gaborcsardi/after/commits{/sha}\"\n#>
  \ $ git_commits_url  : chr \"https://api.github.com/repos/gaborcsardi/after/git/commits{/sha}\"\n#>
  \ $ comments_url     : chr \"https://api.github.com/repos/gaborcsardi/after/comments{/number}\"\n#>
  \ $ issue_comment_url: chr \"https://api.github.com/repos/gaborcsardi/after/issues/comments{/number}\"\n#>
  \ $ contents_url     : chr \"https://api.github.com/repos/gaborcsardi/after/contents/{+path}\"\n#>
  \ $ compare_url      : chr \"https://api.github.com/repos/gaborcsardi/after/compare/{base}...{head}\"\n#>
  \ $ merges_url       : chr \"https://api.github.com/repos/gaborcsardi/after/merges\"\n#>
  \ $ archive_url      : chr \"https://api.github.com/repos/gaborcsardi/after/{archive_format}{/ref}\"\n#>
  \ $ downloads_url    : chr \"https://api.github.com/repos/gaborcsardi/after/downloads\"\n#>
  \ $ issues_url       : chr \"https://api.github.com/repos/gaborcsardi/after/issues{/number}\"\n#>
  \ $ pulls_url        : chr \"https://api.github.com/repos/gaborcsardi/after/pulls{/number}\"\n#>
  \ $ milestones_url   : chr \"https://api.github.com/repos/gaborcsardi/after/milestones{/number}\"\n#>
  \ $ notifications_url: chr \"https://api.github.com/repos/gaborcsardi/after/notifications{?since,all,participating}\"\n#>
  \ $ labels_url       : chr \"https://api.github.com/repos/gaborcsardi/after/labels{/name}\"\n#>
  \ $ releases_url     : chr \"https://api.github.com/repos/gaborcsardi/after/releases{/id}\"\n#>
  \ $ deployments_url  : chr \"https://api.github.com/repos/gaborcsardi/after/deployments\"\n#>
  \ $ created_at       : chr \"2016-06-14T22:33:49Z\"\n#>  $ updated_at       : chr
  \"2016-07-21T17:42:35Z\"\n#>  $ pushed_at        : chr \"2016-07-09T16:13:42Z\"\n#>
  \ $ git_url          : chr \"git://github.com/gaborcsardi/after.git\"\n#>  $ ssh_url
  \         : chr \"git@github.com:gaborcsardi/after.git\"\n#>  $ clone_url        :
  chr \"https://github.com/gaborcsardi/after.git\"\n#>  $ svn_url          : chr \"https://github.com/gaborcsardi/after\"\n#>
  \ $ homepage         : NULL\n#>  $ size             : int 15\n#>  $ stargazers_count
  : int 5\n#>  $ watchers_count   : int 5\n#>  $ language         : chr \"R\"\n#>
  \ $ has_issues       : logi TRUE\n#>  $ has_downloads    : logi TRUE\n#>  $ has_wiki
  \        : logi TRUE\n#>  $ has_pages        : logi FALSE\n#>  $ forks_count      :
  int 0\n#>  $ mirror_url       : NULL\n#>  $ open_issues_count: int 0\n#>  $ forks
  \           : int 0\n#>  $ open_issues      : int 0\n#>  $ watchers         : int
  5\n#>  $ default_branch   : chr \"master\"\n```\n\nThe output is long, but informative\\!
  If you study this for a little\nbit, you should realise that we have a bunch of
  information about a\nsingle GitHub repository (`gaborcsard/after`).\n\nOur hypothesis
  then is that we have an array of arrays of objects, where\neach object contains
  information about a GitHub repository. In other\nwords, `gh_repos[[1]]` is a list
  of GitHub repos (which is also a list).\nAnd so is `gh_repos[[2]]`, `gh_repos[[3]]`,
  …, all the way up to\n`gh_repos[[6]]`. We can check this hypothesis by spelunking
  around the\nlist a little more (results hidden to save space).\n\n``` r\nstr(gh_repos[[1]][[2]])\nstr(gh_repos[[2]][[2]])\nstr(gh_repos[[6]][[30]])\n```\n\nHow
  many repos are there in total? We need to find the length of each\nsub-list, and
  sum them up:\n\n``` r\ngh_repos %>% map_int(length) %>% sum()\n#> [1] 176\n```\n\n###
  Flatten\n\nThis nesting is annoying and doesn’t contain any useful information.\n(You
  might wonder why it’s there in the first place: here it’s because\neach top-level
  list is for a single user, but it’s common to see this\nsort of structure when retrieving
  multiple pages of data). The easiest\nthing is to get rid of it by using `flatten()`,
  which flattens a list of\nlists into a single list. There were 176 sublists before
  so now we get a\nlist of length 176.\n\n``` r\ngh_flat <- gh_repos %>% flatten()\nlength(gh_flat)\n#>
  [1] 176\n```\n\n![](diagrams/lists-flatten.png)<!-- -->\n\n### Rectangle\n\nImagine
  we want to collapse some of this information into a tibble. For\nthe sake of this
  example, lets say we want:\n\n  - the name of the repo\n  - the number of open issues\n
  \ - if it has a wiki\n  - the homepage\n  - the owner’s GitHub name\n\nTo extract
  each of these variables we need to use a map function. The\nfirst three are easy:
  you just need to identify the name of the\ncomponent and its type.\n\n``` r\nfirst10
  <- gh_flat %>% head(10)\n\nfirst10 %>% map_chr(\"name\")\n#>  [1] \"after\"       \"argufy\"
  \     \"ask\"         \"baseimports\" \"citest\"     \n#>  [6] \"clisymbols\"  \"cmaker\"
  \     \"cmark\"       \"conditions\"  \"crayon\"\nfirst10 %>% map_int(\"open_issues_count\")\n#>
  \ [1] 0 6 4 0 0 0 0 0 0 7\nfirst10 %>% map_lgl(\"has_wiki\")\n#>  [1] TRUE TRUE
  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n```\n\nThe homepage is a little trickier:\n\n```
  r\nfirst10 %>% map_chr(\"homepage\")\n#> Error: Result 1 is not a length 1 atomic
  vector\n```\n\nWhenever you see this error, you’ve got two options to dig into it.\nEither
  switch to `map()` or find the specific value that’s a problem.\nHere that’s position
  1.\n\n``` r\nfirst10[[1]]$\"homepage\"\n#> NULL\nfirst10 %>% map(\"homepage\")\n#>
  [[1]]\n#> NULL\n#> \n#> [[2]]\n#> NULL\n#> \n#> [[3]]\n#> NULL\n#> \n#> [[4]]\n#>
  NULL\n#> \n#> [[5]]\n#> NULL\n#> \n#> [[6]]\n#> [1] \"\"\n#> \n#> [[7]]\n#> NULL\n#>
  \n#> [[8]]\n#> NULL\n#> \n#> [[9]]\n#> NULL\n#> \n#> [[10]]\n#> NULL\n```\n\nIt
  looks like most of these are missing a homepage. JSON doesn’t have\nmissing values,
  so instead of an `NA`, we get a `NULL`. purrr map\nfunctions provide an easy way
  to turn these into something useful: you\ncan supply a `.default` value. Here I’m
  going to use `\"\"` since it looks\nlike some repos get that value. Finding the
  right default value is often\na matter of trial and error.\n\n``` r\nfirst10 %>%
  map_chr(\"homepage\", .default = \"\")\n#>  [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\"
  \"\" \"\" \"\"\n```\n\n(None of the first 10 repos have homepages but later ones
  do)\n\nGetting the owner’s repo name is a little trickier because it doesn’t\nlive
  at the top-level; it lives one level down. Fortunately you can\nsupply a character
  vector to the map functions:\n\n``` r\nfirst10 %>% map_chr(c(\"owner\", \"login\"))\n#>
  \ [1] \"gaborcsardi\" \"gaborcsardi\" \"gaborcsardi\" \"gaborcsardi\" \"gaborcsardi\"\n#>
  \ [6] \"gaborcsardi\" \"gaborcsardi\" \"gaborcsardi\" \"gaborcsardi\" \"gaborcsardi\"\n```\n\nWe
  can put all these bits together to make a tibble:\n\n``` r\ngh_tibble <- tibble(\n
  \ name =     gh_flat %>% map_chr(\"name\"),\n  issues =   gh_flat %>% map_int(\"open_issues_count\"),\n
  \ wiki =     gh_flat %>% map_lgl(\"has_wiki\"),\n  homepage = gh_flat %>% map_chr(\"homepage\",
  .default = \"\"),\n  owner =    gh_flat %>% map_chr(c(\"owner\", \"login\"))\n)\ngh_tibble\n#>
  # A tibble: 176 x 5\n#>    name        issues wiki  homepage owner      \n#>    <chr>
  \       <int> <lgl> <chr>    <chr>      \n#>  1 after            0 T     \"\"       gaborcsardi\n#>
  \ 2 argufy           6 T     \"\"       gaborcsardi\n#>  3 ask              4 T
  \    \"\"       gaborcsardi\n#>  4 baseimports      0 T     \"\"       gaborcsardi\n#>
  \ 5 citest           0 T     \"\"       gaborcsardi\n#>  6 clisymbols       0 T
  \    \"\"       gaborcsardi\n#>  7 cmaker           0 T     \"\"       gaborcsardi\n#>
  \ 8 cmark            0 T     \"\"       gaborcsardi\n#>  9 conditions       0 T
  \    \"\"       gaborcsardi\n#> 10 crayon           7 T     \"\"       gaborcsardi\n#>
  # ... with 166 more rows\n```\n\nOur rectangling is complete\\!\n"
